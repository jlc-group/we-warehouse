-- Migration: ‡πÄ‡∏û‡∏¥‡πà‡∏° warehouse access control ‡πÉ‡∏ô users table
-- Created: 2025-10-07
-- Description: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° warehouse

-- ============================================================================
-- PART 1: ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö warehouse access control
-- ============================================================================

-- ‡πÄ‡∏û‡∏¥‡πà‡∏° warehouse_id ‡πÅ‡∏•‡∏∞ access control flag
ALTER TABLE public.users
  ADD COLUMN IF NOT EXISTS warehouse_id UUID REFERENCES public.warehouses(id) ON DELETE SET NULL,
  ADD COLUMN IF NOT EXISTS can_access_all_warehouses BOOLEAN DEFAULT false;

-- ‡πÄ‡∏û‡∏¥‡πà‡∏° comment ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ columns
COMMENT ON COLUMN public.users.warehouse_id IS 'Warehouse ‡∏ó‡∏µ‡πà user ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î - ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ warehouse ‡∏ô‡∏µ‡πâ';
COMMENT ON COLUMN public.users.can_access_all_warehouses IS 'Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin/manager ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å warehouse';

-- ============================================================================
-- PART 2: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
-- ============================================================================

-- Admin ‡πÅ‡∏•‡∏∞ Manager level ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å warehouse
UPDATE public.users
SET can_access_all_warehouses = true
WHERE role_level <= 2 OR department = '‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£';

-- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î default warehouse ‡πÉ‡∏´‡πâ users ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ warehouse
-- (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å warehouse ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)
DO $$
DECLARE
  default_warehouse_id UUID;
BEGIN
  -- ‡∏´‡∏≤ warehouse ‡πÅ‡∏£‡∏Å
  SELECT id INTO default_warehouse_id
  FROM public.warehouses
  WHERE is_active = true
  ORDER BY created_at
  LIMIT 1;

  -- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ warehouse ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ users ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  IF default_warehouse_id IS NOT NULL THEN
    UPDATE public.users
    SET warehouse_id = default_warehouse_id
    WHERE warehouse_id IS NULL
      AND can_access_all_warehouses = false;
  END IF;
END $$;

-- ============================================================================
-- PART 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance
-- ============================================================================

CREATE INDEX IF NOT EXISTS idx_users_warehouse_id
  ON public.users(warehouse_id)
  WHERE warehouse_id IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_users_can_access_all
  ON public.users(can_access_all_warehouses)
  WHERE can_access_all_warehouses = true;

-- ============================================================================
-- PART 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
-- ============================================================================

-- Function: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á warehouse ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
CREATE OR REPLACE FUNCTION public.user_can_access_warehouse(
  p_user_id UUID,
  p_warehouse_id UUID
)
RETURNS BOOLEAN AS $$
DECLARE
  v_can_access_all BOOLEAN;
  v_user_warehouse_id UUID;
BEGIN
  -- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
  SELECT
    can_access_all_warehouses,
    warehouse_id
  INTO
    v_can_access_all,
    v_user_warehouse_id
  FROM public.users
  WHERE id = p_user_id
    AND is_active = true;

  -- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ user ‡∏´‡∏£‡∏∑‡∏≠ user ‡πÑ‡∏°‡πà active
  IF NOT FOUND THEN
    RETURN false;
  END IF;

  -- ‡∏ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å warehouse
  IF v_can_access_all = true THEN
    RETURN true;
  END IF;

  -- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô warehouse ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà user ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î
  IF v_user_warehouse_id = p_warehouse_id THEN
    RETURN true;
  END IF;

  -- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
  RETURN false;
END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER;

-- Grant permission
GRANT EXECUTE ON FUNCTION public.user_can_access_warehouse(UUID, UUID) TO authenticated;

COMMENT ON FUNCTION public.user_can_access_warehouse IS '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á warehouse ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà';

-- ============================================================================
-- PART 5: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï sample users
-- ============================================================================

-- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î warehouse ‡πÉ‡∏´‡πâ sample users (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
DO $$
DECLARE
  main_warehouse_id UUID;
BEGIN
  -- ‡∏´‡∏≤ warehouse ‡∏´‡∏•‡∏±‡∏Å
  SELECT id INTO main_warehouse_id
  FROM public.warehouses
  WHERE code = 'MAIN' OR name LIKE '%‡∏´‡∏•‡∏±‡∏Å%'
  ORDER BY created_at
  LIMIT 1;

  IF main_warehouse_id IS NOT NULL THEN
    -- Admin - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å warehouse
    UPDATE public.users
    SET
      warehouse_id = main_warehouse_id,
      can_access_all_warehouses = true
    WHERE username = 'admin';

    -- Warehouse Manager - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å warehouse
    UPDATE public.users
    SET
      warehouse_id = main_warehouse_id,
      can_access_all_warehouses = true
    WHERE username = 'warehouse_manager';

    -- Staff - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ warehouse ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    UPDATE public.users
    SET
      warehouse_id = main_warehouse_id,
      can_access_all_warehouses = false
    WHERE username IN ('inventory_staff', 'purchasing_staff', 'qa_staff');
  END IF;
END $$;

-- ============================================================================
-- PART 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á view ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user management ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° warehouse info
-- ============================================================================

CREATE OR REPLACE VIEW public.users_with_warehouse_view AS
SELECT
  u.id,
  u.username,
  u.email,
  u.full_name,
  u.department,
  u.role,
  u.role_level,
  u.warehouse_id,
  u.can_access_all_warehouses,
  u.permissions,
  u.is_active,
  u.employee_code,
  u.phone,
  u.last_login,
  w.name as warehouse_name,
  w.code as warehouse_code,
  CASE
    WHEN u.can_access_all_warehouses THEN '‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏•‡∏±‡∏á'
    WHEN w.name IS NOT NULL THEN w.name
    ELSE '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  END as warehouse_display
FROM public.users u
LEFT JOIN public.warehouses w ON u.warehouse_id = w.id
ORDER BY u.role_level ASC, u.full_name ASC;

-- Grant access
GRANT SELECT ON public.users_with_warehouse_view TO authenticated;

COMMENT ON VIEW public.users_with_warehouse_view IS 'User management view ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• warehouse';

-- ============================================================================
-- VERIFICATION QUERIES
-- ============================================================================

-- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£ migration
DO $$
BEGIN
  RAISE NOTICE '‚úÖ Migration completed successfully!';
  RAISE NOTICE '';
  RAISE NOTICE 'üìä Users with warehouse access:';
END $$;

-- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡∏û‡∏£‡πâ‡∏≠‡∏° warehouse
SELECT
  username,
  full_name,
  department,
  warehouse_display,
  can_access_all_warehouses as can_access_all,
  is_active
FROM public.users_with_warehouse_view
ORDER BY role_level;
