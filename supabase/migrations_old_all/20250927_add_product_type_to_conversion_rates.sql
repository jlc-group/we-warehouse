-- Migration: Add product_type and product_id columns to product_conversion_rates
-- Date: 2025-09-27
-- Purpose: Enable complete relationship between products and conversion_rates tables
-- Author: Claude Code Assistant

-- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå product_id ‡πÅ‡∏•‡∏∞ product_type
-- ‡πÉ‡∏ä‡πâ IF NOT EXISTS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

DO $$
BEGIN
    -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå product_id (UUID) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á products
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'product_conversion_rates'
        AND column_name = 'product_id'
    ) THEN
        ALTER TABLE public.product_conversion_rates
        ADD COLUMN product_id UUID;

        RAISE NOTICE '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå product_id ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß';
    ELSE
        RAISE NOTICE '‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå product_id ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß';
    END IF;

    -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå product_type (TEXT) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'product_conversion_rates'
        AND column_name = 'product_type'
    ) THEN
        ALTER TABLE public.product_conversion_rates
        ADD COLUMN product_type TEXT;

        RAISE NOTICE '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå product_type ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß';
    ELSE
        RAISE NOTICE '‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå product_type ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß';
    END IF;
END $$;

-- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏û‡∏¥‡πà‡∏° Foreign Key Constraint
-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ constraint ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'fk_product_conversion_product_id'
        AND table_name = 'product_conversion_rates'
    ) THEN
        ALTER TABLE public.product_conversion_rates
        ADD CONSTRAINT fk_product_conversion_product_id
        FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;

        RAISE NOTICE '‡∏™‡∏£‡πâ‡∏≤‡∏á Foreign Key Constraint ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß';
    ELSE
        RAISE NOTICE 'Foreign Key Constraint ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß';
    END IF;
END $$;

-- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á Indexes ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û

-- Index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö product_id
CREATE INDEX IF NOT EXISTS idx_product_conversion_rates_product_id
ON public.product_conversion_rates(product_id);

-- Index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö product_type
CREATE INDEX IF NOT EXISTS idx_product_conversion_rates_product_type
ON public.product_conversion_rates(product_type);

-- Index ‡πÅ‡∏ö‡∏ö compound ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
CREATE INDEX IF NOT EXISTS idx_product_conversion_rates_type_sku
ON public.product_conversion_rates(product_type, sku);

-- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á products
-- ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà SKU ‡πÉ‡∏ô conversion_rates ‡∏Å‡∏±‡∏ö sku_code ‡πÉ‡∏ô products

UPDATE public.product_conversion_rates
SET
    product_id = p.id,
    product_type = p.product_type
FROM public.products p
WHERE
    product_conversion_rates.sku = p.sku_code
    AND product_conversion_rates.product_id IS NULL;

-- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
DO $$
DECLARE
    updated_count INTEGER;
    total_conversions INTEGER;
    unlinked_count INTEGER;
BEGIN
    -- ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
    SELECT COUNT(*) INTO updated_count
    FROM public.product_conversion_rates
    WHERE product_id IS NOT NULL;

    -- ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    SELECT COUNT(*) INTO total_conversions
    FROM public.product_conversion_rates;

    -- ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á
    SELECT COUNT(*) INTO unlinked_count
    FROM public.product_conversion_rates
    WHERE product_id IS NULL;

    RAISE NOTICE 'üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:';
    RAISE NOTICE '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: % / %', updated_count, total_conversions;
    RAISE NOTICE '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á: %', unlinked_count;

    IF unlinked_count > 0 THEN
        RAISE WARNING '‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ % ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÑ‡∏î‡πâ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SKU', unlinked_count;
    END IF;
END $$;

-- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏™‡∏£‡πâ‡∏≤‡∏á Function ‡πÅ‡∏•‡∏∞ Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auto-sync product_type

-- Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ sync product_type ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
CREATE OR REPLACE FUNCTION public.sync_product_conversion_type()
RETURNS TRIGGER AS $$
BEGIN
    -- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï product_id ‡πÉ‡∏´‡πâ sync product_type ‡∏î‡πâ‡∏ß‡∏¢
    IF NEW.product_id IS DISTINCT FROM OLD.product_id AND NEW.product_id IS NOT NULL THEN
        SELECT product_type INTO NEW.product_type
        FROM public.products
        WHERE id = NEW.product_id;

        -- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô products table
        IF NOT FOUND THEN
            RAISE WARNING '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö product_id: %', NEW.product_id;
            NEW.product_type := NULL;
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auto-sync
DROP TRIGGER IF EXISTS trigger_sync_product_conversion_type ON public.product_conversion_rates;
CREATE TRIGGER trigger_sync_product_conversion_type
    BEFORE UPDATE ON public.product_conversion_rates
    FOR EACH ROW
    EXECUTE FUNCTION public.sync_product_conversion_type();

-- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Query ‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å

-- View products_with_conversions ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£ query ‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
CREATE OR REPLACE VIEW public.products_with_conversions AS
SELECT
    -- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á products
    p.id,
    p.sku_code,
    p.product_name,
    p.product_type,
    p.category,
    p.subcategory,
    p.brand,
    p.unit_of_measure,
    p.is_active,
    p.created_at as product_created_at,
    p.updated_at as product_updated_at,

    -- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á product_conversion_rates
    pcr.id as conversion_id,
    pcr.sku as conversion_sku,
    pcr.unit_level1_name,
    pcr.unit_level1_rate,
    pcr.unit_level2_name,
    pcr.unit_level2_rate,
    pcr.unit_level3_name,
    pcr.created_at as conversion_created_at,
    pcr.updated_at as conversion_updated_at,

    -- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á
    CASE
        WHEN pcr.id IS NOT NULL THEN true
        ELSE false
    END as has_conversion_rates,

    -- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (10 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö 1 + 2 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö 2 + 5 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö 3)
    CASE
        WHEN pcr.unit_level1_rate IS NOT NULL AND pcr.unit_level2_rate IS NOT NULL THEN
            (10 * COALESCE(pcr.unit_level1_rate, 0)) +
            (2 * COALESCE(pcr.unit_level2_rate, 0)) + 5
        WHEN pcr.unit_level1_rate IS NOT NULL THEN
            (10 * COALESCE(pcr.unit_level1_rate, 0)) + 5
        WHEN pcr.unit_level2_rate IS NOT NULL THEN
            (2 * COALESCE(pcr.unit_level2_rate, 0)) + 5
        ELSE 5
    END as example_calculation

FROM public.products p
LEFT JOIN public.product_conversion_rates pcr ON p.id = pcr.product_id
WHERE p.is_active = true
ORDER BY p.product_type, p.sku_code;

-- Grant permissions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö View
GRANT SELECT ON public.products_with_conversions TO anon, authenticated;

-- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡πÄ‡∏û‡∏¥‡πà‡∏° Comments ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

COMMENT ON COLUMN public.product_conversion_rates.product_id IS
'Foreign key ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á products - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á';

COMMENT ON COLUMN public.product_conversion_rates.product_type IS
'‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (FG, PK, RM) - sync ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á products ‡∏ú‡πà‡∏≤‡∏ô trigger';

COMMENT ON VIEW public.products_with_conversions IS
'View ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢ - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô';

COMMENT ON FUNCTION public.sync_product_conversion_type() IS
'Function ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï product_type ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ product_id ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á';

-- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
SELECT
    'üéâ Migration ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå product_type ‡πÅ‡∏•‡∏∞ product_id ‡πÅ‡∏•‡πâ‡∏ß' as status,
    NOW() as completed_at;

-- ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á Migration
SELECT
    COUNT(*) as total_products,
    COUNT(CASE WHEN product_type = 'FG' THEN 1 END) as fg_products,
    COUNT(CASE WHEN product_type = 'PK' THEN 1 END) as pk_products,
    COUNT(CASE WHEN product_type IS NULL THEN 1 END) as untyped_products
FROM public.products_with_conversions;

-- ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß
SELECT
    '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß:' as info,
    sku_code,
    product_name,
    product_type,
    has_conversion_rates
FROM public.products_with_conversions
WHERE has_conversion_rates = true
LIMIT 5;