/**
 * Script to populate products table from sampleInventory.ts data
 * This script reads the product data and inserts it into Supabase products table
 */

import { createClient } from '@supabase/supabase-js';
import { fg_products, pk_products } from '../src/data/sampleInventory.ts';

// Initialize Supabase client
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function populateProducts() {
  try {
    console.log('üöÄ Starting products data population...');

    // Prepare FG products data
    const fgProductsData = fg_products.map(product => ({
      sku_code: product.code,
      product_name: product.name,
      product_type: 'FG',
      category: 'cosmetics',
      subcategory: getSubcategoryFromName(product.name),
      brand: 'Chulaherb',
      description: `${product.name} - ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á`,
      unit_of_measure: 'pieces',
      storage_conditions: '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏´‡πâ‡∏≠‡∏á',
      manufacturing_country: 'Thailand',
      reorder_level: 10,
      max_stock_level: 100,
      is_active: true
    }));

    // Prepare PK products data
    const pkProductsData = pk_products.map(product => ({
      sku_code: product.code,
      product_name: product.name,
      product_type: 'PK',
      category: 'packaging',
      subcategory: getPackagingSubcategory(product.name, product.code),
      brand: 'Generic',
      description: `${product.name} - ‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ`,
      unit_of_measure: 'pieces',
      storage_conditions: '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏´‡πâ‡∏≠‡∏á',
      manufacturing_country: 'Thailand',
      reorder_level: 50,
      max_stock_level: 500,
      is_active: true
    }));

    console.log(`üì¶ Inserting ${fgProductsData.length} FG products...`);

    // Insert FG products in batches
    const { data: fgData, error: fgError } = await supabase
      .from('products')
      .upsert(fgProductsData, {
        onConflict: 'sku_code',
        ignoreDuplicates: true
      });

    if (fgError) {
      console.error('‚ùå Error inserting FG products:', fgError);
    } else {
      console.log(`‚úÖ Successfully inserted ${fgProductsData.length} FG products`);
    }

    console.log(`üè≠ Inserting ${pkProductsData.length} PK products...`);

    // Insert PK products in batches
    const { data: pkData, error: pkError } = await supabase
      .from('products')
      .upsert(pkProductsData, {
        onConflict: 'sku_code',
        ignoreDuplicates: true
      });

    if (pkError) {
      console.error('‚ùå Error inserting PK products:', pkError);
    } else {
      console.log(`‚úÖ Successfully inserted ${pkProductsData.length} PK products`);
    }

    // Verify the data
    const { count: totalCount, error: countError } = await supabase
      .from('products')
      .select('*', { count: 'exact', head: true });

    if (countError) {
      console.error('‚ùå Error counting products:', countError);
    } else {
      console.log(`üìä Total products in database: ${totalCount}`);
    }

    console.log('üéâ Products population completed successfully!');

  } catch (error) {
    console.error('üí• Error during population:', error);
    process.exit(1);
  }
}

// Helper function to determine subcategory from product name
function getSubcategoryFromName(name) {
  const nameLower = name.toLowerCase();

  if (nameLower.includes('‡πÄ‡∏ã‡∏£‡∏±‡πà‡∏°') || nameLower.includes('serum')) return 'serum';
  if (nameLower.includes('‡∏Ñ‡∏£‡∏µ‡∏°') || nameLower.includes('cream')) return 'cream';
  if (nameLower.includes('‡πÇ‡∏•‡∏ä‡∏±‡πà‡∏ô') || nameLower.includes('lotion')) return 'lotion';
  if (nameLower.includes('‡πÄ‡∏à‡∏•') || nameLower.includes('gel')) return 'gel';
  if (nameLower.includes('‡∏ã‡∏±‡∏ô‡∏™‡∏Å‡∏£‡∏µ‡∏ô') || nameLower.includes('sunscreen')) return 'sunscreen';
  if (nameLower.includes('‡∏¢‡∏π‡∏ß‡∏µ') || nameLower.includes('uv')) return 'sunscreen';
  if (nameLower.includes('‡∏ó‡∏π‡∏ò‡πÄ‡∏û‡∏™‡∏ó‡πå') || nameLower.includes('toothpaste')) return 'oral_care';
  if (nameLower.includes('‡∏°‡∏≤‡∏™‡∏Å‡πå') || nameLower.includes('mask')) return 'mask';
  if (nameLower.includes('‡∏•‡∏¥‡∏õ') || nameLower.includes('lip')) return 'lip_care';
  if (nameLower.includes('‡∏Ñ‡∏π‡∏ä‡∏±‡πà‡∏ô') || nameLower.includes('cushion')) return 'makeup';

  return 'skincare';
}

// Helper function to determine packaging subcategory
function getPackagingSubcategory(name, code) {
  const nameLower = name.toLowerCase();
  const codeLower = code.toLowerCase();

  if (codeLower.includes('cap') || nameLower.includes('‡∏ù‡∏≤')) return 'caps';
  if (codeLower.includes('box') || nameLower.includes('‡∏Å‡∏•‡πà‡∏≠‡∏á')) return 'boxes';
  if (codeLower.includes('bt') || codeLower.includes('bottle') || nameLower.includes('‡∏Ç‡∏ß‡∏î')) return 'bottles';
  if (codeLower.includes('tb') || codeLower.includes('tube') || nameLower.includes('‡∏´‡∏•‡∏≠‡∏î')) return 'tubes';
  if (codeLower.includes('sch') || nameLower.includes('‡∏ã‡∏≠‡∏á')) return 'sachets';
  if (codeLower.includes('sp') || codeLower.includes('spout') || nameLower.includes('‡∏à‡∏∏‡∏Å')) return 'spouts';
  if (codeLower.includes('stk') || codeLower.includes('stick') || nameLower.includes('‡πÅ‡∏ó‡πà‡∏á')) return 'sticks';
  if (codeLower.includes('stopper') || nameLower.includes('‡∏à‡∏∏‡∏Å‡∏Å‡∏±‡∏ô')) return 'stoppers';

  return 'general';
}

// Run the script
populateProducts();