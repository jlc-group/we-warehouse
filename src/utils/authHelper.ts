// Utility ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Authentication ‡πÉ‡∏ô Sales System
import { supabase } from '@/integrations/supabase/client';

export interface AuthUser {
  id: string;
  email?: string;
  full_name?: string;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á user ID ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
export const getCurrentUserId = async (): Promise<string | null> => {
  try {
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Supabase Auth ‡∏Å‡πà‡∏≠‡∏ô
    const { data: { user } } = await supabase.auth.getUser();
    if (user?.id) {
      return user.id;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏à‡∏≤‡∏Å localStorage (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö demo)
    const userData = localStorage.getItem('warehouse_user');
    if (userData) {
      const parsedUser = JSON.parse(userData);
      return parsedUser.id || null;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏™‡∏£‡πâ‡∏≤‡∏á anonymous user ID
    const anonymousId = `anon-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    console.warn('üî∂ Creating anonymous user ID for demo:', anonymousId);
    return anonymousId;

  } catch (error) {
    console.error('Error getting current user ID:', error);
    // Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    return `fallback-${Date.now()}`;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
export const getCurrentUser = async (): Promise<AuthUser | null> => {
  try {
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Supabase Auth ‡∏Å‡πà‡∏≠‡∏ô
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      return {
        id: user.id,
        email: user.email,
        full_name: user.user_metadata?.full_name || user.email?.split('@')[0]
      };
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏à‡∏≤‡∏Å localStorage (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö demo)
    const userData = localStorage.getItem('warehouse_user');
    if (userData) {
      const parsedUser = JSON.parse(userData);
      return {
        id: parsedUser.id,
        email: parsedUser.email,
        full_name: parsedUser.full_name
      };
    }

    return null;
  } catch (error) {
    console.error('Error getting current user:', error);
    return null;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ permission ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
export const hasPermission = (permission: string): boolean => {
  try {
    const userData = localStorage.getItem('warehouse_user');
    if (!userData) return true; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ auth (demo mode)

    const user = JSON.parse(userData);
    const roleLevel = user.role_level || 1;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î permissions ‡∏ï‡∏≤‡∏° role_level
    const permissions: Record<number, string[]> = {
      5: ['sales.create', 'sales.update', 'sales.delete', 'sales.view'],
      4: ['sales.create', 'sales.update', 'sales.view'],
      3: ['sales.create', 'sales.view'],
      2: ['sales.view'],
      1: ['sales.view']
    };

    const userPermissions = permissions[roleLevel] || ['sales.view'];
    return userPermissions.includes(permission);
  } catch (error) {
    console.error('Error checking permission:', error);
    return true; // Fallback ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö set up default user ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo
export const ensureDemoUser = () => {
  const userData = localStorage.getItem('warehouse_user');
  if (!userData) {
    const demoUser = {
      id: `demo-user-${Date.now()}`,
      email: 'demo@warehouse.com',
      full_name: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      department: '‡∏Ç‡∏≤‡∏¢',
      role: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢',
      role_level: 3,
      is_active: true,
      last_login: new Date().toISOString()
    };

    localStorage.setItem('warehouse_user', JSON.stringify(demoUser));
    console.log('üîß Demo user created for testing:', demoUser.full_name);
    return demoUser;
  }

  return JSON.parse(userData);
};

export default {
  getCurrentUserId,
  getCurrentUser,
  hasPermission,
  ensureDemoUser
};