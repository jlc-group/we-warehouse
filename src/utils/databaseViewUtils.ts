import { supabase } from '@/integrations/supabase/client';

// Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö view
const viewExistenceCache = new Map<string, boolean>();
const cacheTimeout = 5 * 60 * 1000; // 5 minutes
const cacheTimestamps = new Map<string, number>();

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö view
export interface ViewCheckResult {
  exists: boolean;
  cached: boolean;
  checkedAt: Date;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ database view ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param viewName ‡∏ä‡∏∑‡πà‡∏≠ view ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @param useCache ‡πÉ‡∏ä‡πâ cache ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: true)
 * @returns ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 */
export async function checkViewExists(
  viewName: string,
  useCache: boolean = true
): Promise<ViewCheckResult> {
  const now = Date.now();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
  if (useCache && viewExistenceCache.has(viewName)) {
    const cachedTime = cacheTimestamps.get(viewName) || 0;
    if (now - cachedTime < cacheTimeout) {
      return {
        exists: viewExistenceCache.get(viewName) || false,
        cached: true,
        checkedAt: new Date(cachedTime)
      };
    }
  }

  console.log(`üîç Checking if view '${viewName}' exists...`);

  try {
    // ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å view ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    const { error } = await supabase
      .from(viewName)
      .select('*')
      .limit(1);

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ error ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ view ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô "does not exist" ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ view ‡πÑ‡∏°‡πà‡∏°‡∏µ
    const exists = !error;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
    viewExistenceCache.set(viewName, exists);
    cacheTimestamps.set(viewName, now);

    console.log(`${exists ? '‚úÖ' : '‚ùå'} View '${viewName}' ${exists ? 'exists' : 'does not exist'}`);

    return {
      exists,
      cached: false,
      checkedAt: new Date(now)
    };

  } catch (error) {
    console.warn(`‚ö†Ô∏è Error checking view '${viewName}':`, error);

    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ view ‡πÑ‡∏°‡πà‡∏°‡∏µ
    viewExistenceCache.set(viewName, false);
    cacheTimestamps.set(viewName, now);

    return {
      exists: false,
      cached: false,
      checkedAt: new Date(now)
    };
  }
}

/**
 * ‡∏•‡πâ‡∏≤‡∏á cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö view ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
 * @param viewName ‡∏ä‡∏∑‡πà‡∏≠ view (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
 */
export function clearViewCache(viewName?: string): void {
  if (viewName) {
    viewExistenceCache.delete(viewName);
    cacheTimestamps.delete(viewName);
    console.log(`üßπ Cleared cache for view '${viewName}'`);
  } else {
    viewExistenceCache.clear();
    cacheTimestamps.clear();
    console.log('üßπ Cleared all view cache');
  }
}

/**
 * ‡∏î‡∏π cache ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging)
 */
export function getViewCacheStatus(): Record<string, { exists: boolean; cachedAt: Date }> {
  const result: Record<string, { exists: boolean; cachedAt: Date }> = {};

  for (const [viewName, exists] of viewExistenceCache.entries()) {
    const cachedAt = cacheTimestamps.get(viewName) || Date.now();
    result[viewName] = {
      exists,
      cachedAt: new Date(cachedAt)
    };
  }

  return result;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö views ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
 * @param viewNames ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ views ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @param useCache ‡πÉ‡∏ä‡πâ cache ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @returns ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export async function checkMultipleViews(
  viewNames: string[],
  useCache: boolean = true
): Promise<Record<string, ViewCheckResult>> {
  console.log(`üîç Checking ${viewNames.length} views:`, viewNames);

  const results = await Promise.allSettled(
    viewNames.map(viewName => checkViewExists(viewName, useCache))
  );

  const output: Record<string, ViewCheckResult> = {};

  viewNames.forEach((viewName, index) => {
    const result = results[index];
    if (result.status === 'fulfilled') {
      output[viewName] = result.value;
    } else {
      output[viewName] = {
        exists: false,
        cached: false,
        checkedAt: new Date()
      };
    }
  });

  return output;
}

// ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ views ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
export const REQUIRED_VIEWS = {
  PRODUCTS_SUMMARY: 'products_summary',
  AVAILABLE_PRODUCTS_FOR_SALES: 'available_products_for_sales',
  INVENTORY_SUMMARY: 'inventory_summary',
  STOCK_MOVEMENTS: 'stock_movements'
} as const;

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö views ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export async function checkRequiredViews(): Promise<Record<string, ViewCheckResult>> {
  const viewNames = Object.values(REQUIRED_VIEWS);
  return await checkMultipleViews(viewNames);
}