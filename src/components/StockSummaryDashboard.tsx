import { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { AlertTriangle, Download, RefreshCw, ArrowUpDown } from 'lucide-react';
import { StockSummaryCards, StockSummaryDetailCards } from './StockSummaryCards';
import { StockSummaryFilters, useFilteredProducts, type FilterOptions } from './StockSummaryFilters';
import { StockSummaryTable } from './StockSummaryTable';
import { useProductsSummary, useProductsSummaryMeta, type ProductSummary } from '@/hooks/useProductsSummary';
import { useStockSummaryStats } from '@/hooks/useStockSummaryStats';
import { toast } from 'sonner';

export function StockSummaryDashboard() {
  const query = useProductsSummary();
  const products = query.data?.data || [];
  const { isLoading, error, refetch } = query;
  const { stats, hasData } = useStockSummaryStats();
  const meta = useProductsSummaryMeta();

  const [filters, setFilters] = useState<FilterOptions>({
    searchTerm: '',
    stockStatus: 'all',
    category: 'all',
    brand: 'all',
    sortBy: 'total_pieces',
    sortOrder: 'desc'
  });

  // ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const filteredProducts = useFilteredProducts(products || [], filters);

  const handleRefresh = async () => {
    try {
      await refetch();
      toast.success('‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    }
  };

  const handleExport = () => {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á CSV content
      const headers = [
        '‡∏£‡∏´‡∏±‡∏™ SKU',
        '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà',
        '‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå',
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏±‡∏á',
        '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏•‡∏±‡∏á',
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á',
        '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏•‡πà‡∏≠‡∏á',
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô',
        '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ä‡∏¥‡πâ‡∏ô',
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏° (‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢)',
        '‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ä‡∏¥‡πâ‡∏ô)',
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Location',
        '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô/‡∏ä‡∏¥‡πâ‡∏ô',
        '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°',
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å',
        '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
      ];

      const csvData = filteredProducts.map(product => {
        const level1 = product.total_level1_quantity || 0;
        const level2 = product.total_level2_quantity || 0;
        const level3 = product.total_level3_quantity || 0;
        const totalPieces = product.total_pieces || 0;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏° ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        const displayQuantity = [];
        if (level1 > 0) displayQuantity.push(`${level1.toLocaleString()} ${product.unit_level1_name || '‡∏•‡∏±‡∏á'}`);
        if (level2 > 0) displayQuantity.push(`${level2.toLocaleString()} ${product.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á'}`);
        if (level3 > 0) displayQuantity.push(`${level3.toLocaleString()} ${product.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô'}`);

        return [
          product.sku,
          product.product_name,
          product.category || '',
          product.brand || '',
          level1,
          product.unit_level1_name || '‡∏•‡∏±‡∏á',
          level2,
          product.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á',
          level3,
          product.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô',
          displayQuantity.join(' + '),
          totalPieces,
          product.location_count || 0,
          product.unit_cost || 0,
          (product.unit_cost || 0) * totalPieces,
          product.stock_status || '',
          product.last_updated || ''
        ];
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV
      const csvContent = [headers, ...csvData]
        .map(row => row.map(field => `"${field}"`).join(','))
        .join('\n');

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
      const blob = new Blob(['\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      toast.success(`‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${filteredProducts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    } catch (error) {
      console.error('Export error:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    }
  };

  const handleItemClick = (product: ProductSummary) => {
    // TODO: ‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    console.log('Product clicked:', product);
    toast.info(`‡∏Ñ‡∏•‡∏¥‡∏Å: ${product.product_name}`);
  };

  if (error) {
    return (
      <Card className="m-6">
        <CardContent className="p-8 text-center">
          <AlertTriangle className="h-12 w-12 mx-auto mb-4 text-red-500" />
          <h3 className="text-lg font-medium text-gray-700 mb-2">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ</h3>
          <p className="text-sm text-gray-500 mb-4">
            ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ï‡πá‡∏≠‡∏Å
          </p>
          <Button onClick={handleRefresh} className="flex items-center gap-2">
            <RefreshCw className="h-4 w-4" />
            ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö</h1>
          <p className="text-gray-600 mt-1">
            ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ SKU ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å location
          </p>
          {meta.isUsingFallback && (
            <p className="text-blue-600 text-sm mt-1 font-medium">
              üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Inventory (Database views ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)
            </p>
          )}
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            onClick={handleRefresh}
            disabled={isLoading}
            className="flex items-center gap-2"
          >
            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
            ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
          </Button>
          {hasData && (
            <Button
              onClick={handleExport}
              className="flex items-center gap-2"
            >
              <Download className="h-4 w-4" />
              ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV
            </Button>
          )}
        </div>
      </div>

      {/* Conversion Legend */}
      <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
        <CardContent className="p-4">
          <div className="flex items-start gap-3">
            <div className="bg-blue-100 p-2 rounded-full">
              <ArrowUpDown className="h-5 w-5 text-blue-600" />
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-blue-900 mb-2">üî¢ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div className="space-y-2">
                  <div className="font-medium text-blue-800">üì¶ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö:</div>
                  <div className="space-y-1 text-blue-700">
                    <div>‚Ä¢ <span className="font-medium">‡∏•‡∏±‡∏á (Level 1)</span> = ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î</div>
                    <div>‚Ä¢ <span className="font-medium">‡∏Å‡∏•‡πà‡∏≠‡∏á (Level 2)</span> = ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏•‡∏≤‡∏á</div>
                    <div>‚Ä¢ <span className="font-medium">‡∏ä‡∏¥‡πâ‡∏ô (Level 3)</span> = ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏™‡∏∏‡∏î (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ê‡∏≤‡∏ô)</div>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="font-medium text-blue-800">üßÆ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:</div>
                  <div className="bg-white p-2 rounded border border-blue-200">
                    <div className="text-blue-700 font-mono text-xs">
                      <div>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ä‡∏¥‡πâ‡∏ô) =</div>
                      <div>(‡∏•‡∏±‡∏á √ó ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏•‡∏±‡∏á) +</div>
                      <div>(‡∏Å‡∏•‡πà‡∏≠‡∏á √ó ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á) +</div>
                      <div>‡∏ä‡∏¥‡πâ‡∏ô</div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="mt-3 text-xs text-blue-600">
                üí° <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Summary Cards */}
      <StockSummaryCards />

      {/* Detail Cards */}
      <StockSummaryDetailCards />

      {/* Filters */}
      <StockSummaryFilters
        filters={filters}
        onFiltersChange={setFilters}
        products={products || []}
        onExport={handleExport}
        onRefresh={handleRefresh}
        isLoading={isLoading}
      />

      {/* Results Summary */}
      {hasData && (
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between text-sm">
              <div className="text-gray-600">
                ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• <span className="font-medium">{filteredProducts.length}</span> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î <span className="font-medium">{products?.length || 0}</span> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </div>
              <div className="flex items-center gap-4 text-gray-500">
                <span>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°: <span className="font-medium text-gray-900">
                  {new Intl.NumberFormat('th-TH', {
                    style: 'currency',
                    currency: 'THB',
                    minimumFractionDigits: 0
                  }).format(
                    filteredProducts.reduce((sum, p) =>
                      sum + ((p.unit_cost || 0) * (p.total_pieces || 0)), 0
                    )
                  )}
                </span></span>
                <span>‡∏ä‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏°: <span className="font-medium text-gray-900">
                  {new Intl.NumberFormat('th-TH').format(
                    filteredProducts.reduce((sum, p) => sum + (p.total_pieces || 0), 0)
                  )}
                </span></span>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Main Table */}
      <StockSummaryTable
        products={filteredProducts}
        isLoading={isLoading}
        onItemClick={handleItemClick}
      />

      {/* Footer Info */}
      {hasData && (
        <Card>
          <CardContent className="p-4">
            <div className="text-center text-sm text-gray-500">
              <p>
                üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {new Date().toLocaleString('th-TH')} |
                üè™ ‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å location ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö |
                üìà ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
              </p>
              <p className="text-xs text-gray-400 mt-1">
                üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏° (‡∏ä‡∏¥‡πâ‡∏ô) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å: (‡∏•‡∏±‡∏á √ó ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏•‡∏±‡∏á) + (‡∏Å‡∏•‡πà‡∏≠‡∏á √ó ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á) + ‡∏ä‡∏¥‡πâ‡∏ô
              </p>
              {meta.isUsingFallback && (
                <p className="text-blue-600 mt-2">
                  üîÑ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Inventory Items (Database views ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)
                </p>
              )}
              {!meta.viewExists && meta.isUsingFallback && (
                <p className="text-orange-600 mt-1">
                  ‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Fallback - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Inventory
                </p>
              )}
              {meta.viewExists && !meta.isUsingFallback && (
                <p className="text-green-600 mt-1">
                  ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Database Views - ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                </p>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}