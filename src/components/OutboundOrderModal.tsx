import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import {
  ShoppingCart,
  User,
  Package,
  Plus,
  Trash2,
  Save,
  Calendar,
  DollarSign,
  AlertTriangle,
  Search
} from 'lucide-react';
import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useCreateOrder, orderTypeOptions, priorityOptions } from '@/hooks/useOrder';
import { CustomerSearchSelector } from '@/components/CustomerSelector';
import { CompactWarehouseSelector } from '@/components/WarehouseSelector';
import { useInventory } from '@/hooks/useInventory';
import type { InventoryItem } from '@/hooks/useInventory';
import { formatUnitsDisplay } from '@/utils/unitCalculations';
import { toast } from 'sonner';

// Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation
const orderSchema = z.object({
  customer_id: z.string().min(1, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'),
  warehouse_id: z.string().optional(),
  order_type: z.string(),
  priority: z.string(),
  due_date: z.string().optional(),
  customer_po_number: z.string().optional(),
  payment_terms: z.number().min(0, '‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö').optional(),
  notes: z.string().optional(),
  shipping_address_line1: z.string().optional(),
  shipping_address_line2: z.string().optional(),
  shipping_district: z.string().optional(),
  shipping_province: z.string().optional(),
  shipping_postal_code: z.string().optional(),
  shipping_contact_person: z.string().optional(),
  shipping_phone: z.string().optional(),
});

type OrderFormData = z.infer<typeof orderSchema>;

interface OrderItemData {
  inventoryItem: InventoryItem;
  ordered_quantity_level1: number;
  ordered_quantity_level2: number;
  ordered_quantity_level3: number;
  unit_price: number;
  notes?: string;
}

interface OutboundOrderModalProps {
  isOpen: boolean;
  onClose: () => void;
  preSelectedItems?: InventoryItem[];
  preSelectedCustomerId?: string;
  preSelectedWarehouseId?: string;
}

export function OutboundOrderModal({
  isOpen,
  onClose,
  preSelectedItems = [],
  preSelectedCustomerId,
  preSelectedWarehouseId
}: OutboundOrderModalProps) {
  const [orderItems, setOrderItems] = useState<OrderItemData[]>([]);
  const [showInventorySearch, setShowInventorySearch] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  const createOrder = useCreateOrder();
  const { items: inventoryItems } = useInventory(preSelectedWarehouseId);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    setValue,
    watch
  } = useForm<OrderFormData>({
    resolver: zodResolver(orderSchema),
    defaultValues: {
      customer_id: preSelectedCustomerId || '',
      warehouse_id: preSelectedWarehouseId || '',
      order_type: 'SALE',
      priority: 'NORMAL',
      payment_terms: 30,
    }
  });

  // Populate preSelectedItems ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î modal
  useEffect(() => {
    if (isOpen && preSelectedItems.length > 0) {
      const initialOrderItems = preSelectedItems.map(item => ({
        inventoryItem: item,
        ordered_quantity_level1: 1, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏•‡∏±‡∏á
        ordered_quantity_level2: 0,
        ordered_quantity_level3: 0,
        unit_price: 100, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 100 ‡∏ö‡∏≤‡∏ó
        notes: ''
      }));
      setOrderItems(initialOrderItems);
      console.log('üõí Populated order items:', initialOrderItems.length, 'items');
    } else if (isOpen && preSelectedItems.length === 0) {
      setOrderItems([]);
      console.log('üõí Cleared order items');
    }
  }, [isOpen, preSelectedItems]);

  const selectedCustomerId = watch('customer_id');
  const selectedWarehouseId = watch('warehouse_id');

  // Reset form ‡πÅ‡∏•‡∏∞ order items ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î modal
  useEffect(() => {
    if (isOpen) {
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      reset({
        customer_id: preSelectedCustomerId || '',
        warehouse_id: preSelectedWarehouseId || '',
        order_type: 'SALE',
        priority: 'NORMAL',
        payment_terms: 30,
        due_date: '',
        customer_po_number: '',
        notes: '',
        shipping_address_line1: '',
        shipping_address_line2: '',
        shipping_district: '',
        shipping_province: '',
        shipping_postal_code: '',
        shipping_contact_person: '',
        shipping_phone: '',
      });

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
      if (preSelectedItems.length > 0) {
        const items: OrderItemData[] = preSelectedItems.map(item => ({
          inventoryItem: item,
          ordered_quantity_level1: 1, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏•‡∏±‡∏á
          ordered_quantity_level2: 0,
          ordered_quantity_level3: 0,
          unit_price: 100, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 100 ‡∏ö‡∏≤‡∏ó
          notes: '',
        }));
        setOrderItems(items);
      } else {
        setOrderItems([]);
      }

      setShowInventorySearch(false);
      setSearchTerm('');
    }
  }, [isOpen, reset, preSelectedItems, preSelectedCustomerId, preSelectedWarehouseId]);

  // Filter inventory ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const filteredInventory = inventoryItems?.filter(item => {
    if (!searchTerm) return true;
    const search = searchTerm.toLowerCase();
    return (
      item.product_name.toLowerCase().includes(search) ||
      item.sku.toLowerCase().includes(search) ||
      item.location.toLowerCase().includes(search)
    );
  }) || [];

  const addInventoryItem = (item: InventoryItem) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingIndex = orderItems.findIndex(orderItem =>
      orderItem.inventoryItem.id === item.id
    );

    if (existingIndex >= 0) {
      toast.warning(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${item.product_name}" ‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß`);
      return;
    }

    const newItem: OrderItemData = {
      inventoryItem: item,
      ordered_quantity_level1: 1, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏•‡∏±‡∏á
      ordered_quantity_level2: 0,
      ordered_quantity_level3: 0,
      unit_price: 100, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 100 ‡∏ö‡∏≤‡∏ó
      notes: '',
    };

    setOrderItems([...orderItems, newItem]);
    setShowInventorySearch(false);
    setSearchTerm('');
    toast.success(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${item.product_name}" ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  };

  const removeOrderItem = (index: number) => {
    const updatedItems = orderItems.filter((_, i) => i !== index);
    setOrderItems(updatedItems);
  };

  const updateOrderItem = (index: number, updates: Partial<OrderItemData>) => {
    const updatedItems = orderItems.map((item, i) =>
      i === index ? { ...item, ...updates } : item
    );
    setOrderItems(updatedItems);
  };

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
  const calculateTotal = () => {
    return orderItems.reduce((total, item) => {
      const quantity = (item.ordered_quantity_level1 || 0) +
                     (item.ordered_quantity_level2 || 0) +
                     (item.ordered_quantity_level3 || 0);
      return total + (quantity * item.unit_price);
    }, 0);
  };

  const onSubmit = async (data: OrderFormData) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (orderItems.length === 0) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
    const invalidItems = orderItems.filter(item => {
      const totalQty = (item.ordered_quantity_level1 || 0) +
                      (item.ordered_quantity_level2 || 0) +
                      (item.ordered_quantity_level3 || 0);
      return totalQty <= 0;
    });

    if (invalidItems.length > 0) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0)');
      return;
    }

    try {
      const totalAmount = calculateTotal();

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á order data
      const orderData = {
        customer_id: data.customer_id,
        warehouse_id: data.warehouse_id || null,
        order_type: data.order_type,
        priority: data.priority,
        status: 'DRAFT',
        order_date: new Date().toISOString().split('T')[0], // ‡πÄ‡∏û‡∏¥‡πà‡∏° order_date ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        due_date: data.due_date || null,
        customer_po_number: data.customer_po_number || null,
        payment_terms: data.payment_terms || 30,
        notes: data.notes || null,
        total_amount: totalAmount,
        final_amount: totalAmount,
        currency: 'THB', // ‡πÄ‡∏û‡∏¥‡πà‡∏° currency default
        shipping_address_line1: data.shipping_address_line1 || null,
        shipping_address_line2: data.shipping_address_line2 || null,
        shipping_district: data.shipping_district || null,
        shipping_province: data.shipping_province || null,
        shipping_postal_code: data.shipping_postal_code || null,
        shipping_contact_person: data.shipping_contact_person || null,
        shipping_phone: data.shipping_phone || null,
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á order items data
      const orderItemsData = orderItems.map((item, index) => ({
        line_number: index + 1,
        product_id: null,
        sku: item.inventoryItem.sku,
        product_name: item.inventoryItem.product_name,
        inventory_item_id: item.inventoryItem.id,
        location: item.inventoryItem.location,
        ordered_quantity_level1: item.ordered_quantity_level1 || 0,
        ordered_quantity_level2: item.ordered_quantity_level2 || 0,
        ordered_quantity_level3: item.ordered_quantity_level3 || 0,
        unit_level1_name: item.inventoryItem.unit_level1_name || '‡∏•‡∏±‡∏á',
        unit_level2_name: item.inventoryItem.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á',
        unit_level3_name: item.inventoryItem.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô',
        level1_to_level2_conversion: item.inventoryItem.unit_level1_rate || 1,
        level2_to_level3_conversion: item.inventoryItem.unit_level2_rate || 1,
        unit_price: item.unit_price,
        line_total: ((item.ordered_quantity_level1 || 0) +
                    (item.ordered_quantity_level2 || 0) +
                    (item.ordered_quantity_level3 || 0)) * item.unit_price,
        status: 'PENDING',
        notes: item.notes || null,
      }));

      await createOrder.mutateAsync({
        orderData,
        orderItems: orderItemsData as any // Type assertion ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á type conflict
      });

      // Reset form ‡πÅ‡∏•‡∏∞ clear items
      reset();
      setOrderItems([]);
      onClose();
    } catch (error) {
      console.error('Error creating order:', error);
    }
  };

  const isLoading = createOrder.isPending;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-6xl bg-white max-h-[95vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <ShoppingCart className="h-5 w-5 text-blue-600" />
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
          </DialogTitle>
          <DialogDescription>
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <User className="h-4 w-4" />
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ *</Label>
                  <CustomerSearchSelector
                    selectedCustomerId={selectedCustomerId}
                    onCustomerChange={(customerId) => setValue('customer_id', customerId || '')}
                    placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤..."
                  />
                  {errors.customer_id && (
                    <p className="text-sm text-red-600">{errors.customer_id.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label>Warehouse</Label>
                  <CompactWarehouseSelector
                    selectedWarehouseId={selectedWarehouseId}
                    onWarehouseChange={(warehouseId) => setValue('warehouse_id', warehouseId || '')}
                    showAllOption={false}
                  />
                </div>

                <div className="space-y-2">
                  <Label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</Label>
                  <Select
                    value={watch('order_type')}
                    onValueChange={(value) => setValue('order_type', value)}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {orderTypeOptions.map((option) => (
                        <SelectItem key={option.value} value={option.value}>
                          {option.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</Label>
                  <Select
                    value={watch('priority')}
                    onValueChange={(value) => setValue('priority', value)}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {priorityOptions.map((option) => (
                        <SelectItem key={option.value} value={option.value}>
                          {option.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="due_date">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</Label>
                  <div className="relative">
                    <Calendar className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                    <Input
                      id="due_date"
                      type="date"
                      {...register('due_date')}
                      className="pl-10"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="payment_terms">‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ß‡∏±‡∏ô)</Label>
                  <Input
                    id="payment_terms"
                    type="number"
                    min="0"
                    {...register('payment_terms', { valueAsNumber: true })}
                    placeholder="30"
                  />
                </div>

                <div className="md:col-span-2 space-y-2">
                  <Label htmlFor="customer_po_number">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà PO ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</Label>
                  <Input
                    id="customer_po_number"
                    {...register('customer_po_number')}
                    placeholder="PO-2024-001"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center gap-2 text-lg">
                  <Package className="h-4 w-4" />
                  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({orderItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
                </CardTitle>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => setShowInventorySearch(!showInventorySearch)}
                >
                  <Plus className="h-4 w-4 mr-2" />
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
              {showInventorySearch && (
                <div className="border rounded-lg p-4 bg-muted/30">
                  <div className="space-y-3">
                    <div className="flex items-center gap-2">
                      <Search className="h-4 w-4 text-muted-foreground" />
                      <Input
                        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠, SKU, ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                      />
                    </div>

                    <div className="max-h-60 overflow-y-auto space-y-2">
                      {filteredInventory.length === 0 ? (
                        <p className="text-center text-muted-foreground py-4">
                          {searchTerm ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤' : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á'}
                        </p>
                      ) : (
                        filteredInventory.map((item) => (
                          <div
                            key={item.id}
                            className="flex items-center justify-between p-3 border rounded cursor-pointer hover:bg-muted/50"
                            onClick={() => addInventoryItem(item)}
                          >
                            <div className="flex-1">
                              <div className="font-medium">{item.product_name}</div>
                              <div className="text-sm text-muted-foreground">
                                {item.sku} ‚Ä¢ {item.location}
                              </div>
                            </div>
                            <div className="text-sm text-muted-foreground">
                              {formatUnitsDisplay(
                                item.unit_level1_quantity || 0,
                                item.unit_level2_quantity || 0,
                                item.unit_level3_quantity || 0,
                                item.unit_level1_name || '‡∏•‡∏±‡∏á',
                                item.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á',
                                item.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô'
                              )}
                            </div>
                          </div>
                        ))
                      )}
                    </div>
                  </div>
                </div>
              )}

              {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
              {orderItems.length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">
                  <Package className="h-8 w-8 mx-auto mb-2 opacity-50" />
                  <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                  <p className="text-sm">‡∏Ñ‡∏•‡∏¥‡∏Å "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
                </div>
              ) : (
                <div className="space-y-3">
                  {orderItems.map((item, index) => (
                    <div key={`${item.inventoryItem.id}-${index}`} className="border rounded-lg p-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1">
                          <div className="font-medium">{item.inventoryItem.product_name}</div>
                          <div className="text-sm text-muted-foreground">
                            {item.inventoryItem.sku} ‚Ä¢ {item.inventoryItem.location}
                          </div>
                          <div className="text-xs text-muted-foreground mt-1">
                            ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {formatUnitsDisplay(
                              item.inventoryItem.unit_level1_quantity || 0,
                              item.inventoryItem.unit_level2_quantity || 0,
                              item.inventoryItem.unit_level3_quantity || 0,
                              item.inventoryItem.unit_level1_name || '‡∏•‡∏±‡∏á',
                              item.inventoryItem.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á',
                              item.inventoryItem.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô'
                            )}
                          </div>
                        </div>
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => removeOrderItem(index)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-5 gap-3">
                        {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Level 1 */}
                        <div className="space-y-1">
                          <Label className="text-xs">
                            {item.inventoryItem.unit_level1_name || '‡∏•‡∏±‡∏á'}
                          </Label>
                          <Input
                            type="number"
                            min="0"
                            value={item.ordered_quantity_level1}
                            onChange={(e) => updateOrderItem(index, {
                              ordered_quantity_level1: parseInt(e.target.value) || 0
                            })}
                            placeholder="0"
                          />
                        </div>

                        {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Level 2 */}
                        <div className="space-y-1">
                          <Label className="text-xs">
                            {item.inventoryItem.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á'}
                          </Label>
                          <Input
                            type="number"
                            min="0"
                            value={item.ordered_quantity_level2}
                            onChange={(e) => updateOrderItem(index, {
                              ordered_quantity_level2: parseInt(e.target.value) || 0
                            })}
                            placeholder="0"
                          />
                        </div>

                        {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Level 3 */}
                        <div className="space-y-1">
                          <Label className="text-xs">
                            {item.inventoryItem.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô'}
                          </Label>
                          <Input
                            type="number"
                            min="0"
                            value={item.ordered_quantity_level3}
                            onChange={(e) => updateOrderItem(index, {
                              ordered_quantity_level3: parseInt(e.target.value) || 0
                            })}
                            placeholder="1"
                          />
                        </div>

                        {/* ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ */}
                        <div className="space-y-1">
                          <Label className="text-xs">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)</Label>
                          <div className="relative">
                            <DollarSign className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                            <Input
                              type="number"
                              min="0"
                              step="0.01"
                              value={item.unit_price}
                              onChange={(e) => updateOrderItem(index, {
                                unit_price: parseFloat(e.target.value) || 0
                              })}
                              placeholder="0.00"
                              className="pl-8"
                            />
                          </div>
                        </div>

                        {/* ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° */}
                        <div className="space-y-1">
                          <Label className="text-xs">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</Label>
                          <div className="h-10 flex items-center px-3 bg-muted/30 rounded text-sm font-medium">
                            ‡∏ø{(((item.ordered_quantity_level1 || 0) +
                                (item.ordered_quantity_level2 || 0) +
                                (item.ordered_quantity_level3 || 0)) * item.unit_price).toLocaleString()}
                          </div>
                        </div>
                      </div>

                      {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
                      <div className="mt-3">
                        <Label className="text-xs">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</Label>
                        <Input
                          value={item.notes || ''}
                          onChange={(e) => updateOrderItem(index, { notes: e.target.value })}
                          placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ..."
                        />
                      </div>
                    </div>
                  ))}

                  {/* ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
                  <Separator />
                  <div className="flex justify-end">
                    <div className="text-right">
                      <div className="text-lg font-semibold">
                        ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ‡∏ø{calculateTotal().toLocaleString()}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {orderItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="shipping_contact_person">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö</Label>
                  <Input
                    id="shipping_contact_person"
                    {...register('shipping_contact_person')}
                    placeholder="‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="shipping_phone">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö</Label>
                  <Input
                    id="shipping_phone"
                    {...register('shipping_phone')}
                    placeholder="08-111-2222"
                  />
                </div>

                <div className="md:col-span-2 space-y-2">
                  <Label htmlFor="shipping_address_line1">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 1</Label>
                  <Input
                    id="shipping_address_line1"
                    {...register('shipping_address_line1')}
                    placeholder="123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó"
                  />
                </div>

                <div className="md:col-span-2 space-y-2">
                  <Label htmlFor="shipping_address_line2">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 2</Label>
                  <Input
                    id="shipping_address_line2"
                    {...register('shipping_address_line2')}
                    placeholder="‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ô ‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="shipping_district">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</Label>
                  <Input
                    id="shipping_district"
                    {...register('shipping_district')}
                    placeholder="‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="shipping_province">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</Label>
                  <Input
                    id="shipping_province"
                    {...register('shipping_province')}
                    placeholder="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="shipping_postal_code">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</Label>
                  <Input
                    id="shipping_postal_code"
                    {...register('shipping_postal_code')}
                    placeholder="10110"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
          <div className="space-y-2">
            <Label htmlFor="notes">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</Label>
            <Textarea
              id="notes"
              {...register('notes')}
              placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ..."
              className="min-h-[80px]"
            />
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              disabled={isLoading}
              className="flex-1"
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>

            <Button
              type="submit"
              disabled={isLoading || orderItems.length === 0}
              className="flex-1"
            >
              {isLoading ? (
                <>
                  <Save className="h-4 w-4 mr-2 animate-pulse" />
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-2" />
                  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                </>
              )}
            </Button>
          </div>

          {/* Warning */}
          {orderItems.length === 0 && (
            <div className="flex items-center gap-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg text-yellow-800 text-sm">
              <AlertTriangle className="h-4 w-4" />
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            </div>
          )}
        </form>
      </DialogContent>
    </Dialog>
  );
}

export default OutboundOrderModal;