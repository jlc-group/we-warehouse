import { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Send, Loader2, Package, AlertCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { calculateTotalBaseQuantity, formatUnitsDisplay } from '@/utils/unitCalculations';

interface ManualExportModalProps {
  isOpen: boolean;
  onClose: () => void;
  location: string;
  items: any[];
  onExportSuccess?: () => void; // Callback to refresh data
}

export function ManualExportModal({ isOpen, onClose, location, items, onExportSuccess }: ManualExportModalProps) {
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [customers, setCustomers] = useState<any[]>([]);
  const [loadingCustomers, setLoadingCustomers] = useState(false);
  const [selectedItem, setSelectedItem] = useState<any | null>(null);
  const [validationError, setValidationError] = useState<string>('');
  const [formData, setFormData] = useState({
    customerId: '',
    quantityLevel1: '', // ‡∏•‡∏±‡∏á
    quantityLevel2: '', // ‡∏Å‡∏•‡πà‡∏≠‡∏á
    quantityLevel3: '', // ‡∏ä‡∏¥‡πâ‡∏ô
    notes: '',
    selectedItemId: '',
    poReference: '',
    unitPrice: '' // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô)
  });

  // Helper function: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏•‡∏±‡∏á/‡∏Å‡∏•‡πà‡∏≠‡∏á/‡∏ä‡∏¥‡πâ‡∏ô)
  const getActualStock = (item: any): number => {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö
    const totalFromMultiLevel = calculateTotalBaseQuantity({
      unit_level1_quantity: item.unit_level1_quantity || 0,
      unit_level1_rate: item.unit_level1_rate || 0,
      unit_level2_quantity: item.unit_level2_quantity || 0,
      unit_level2_rate: item.unit_level2_rate || 0,
      unit_level3_quantity: item.unit_level3_quantity || 0
    });

    // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (totalFromMultiLevel > 0) {
      return totalFromMultiLevel;
    }

    // Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ conversion rates
    const legacyStock = item.pieces_quantity_legacy ||
                        item.box_quantity_legacy ||
                        item.carton_quantity_legacy ||
                        0;
    return Number(legacyStock);
  };

  // Helper function: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (2 ‡∏•‡∏±‡∏á + 3 ‡∏Å‡∏•‡πà‡∏≠‡∏á + 5 ‡∏ä‡∏¥‡πâ‡∏ô)
  const getStockDisplay = (item: any): string => {
    const display = formatUnitsDisplay({
      unit_level1_name: item.unit_level1_name,
      unit_level1_quantity: item.unit_level1_quantity || 0,
      unit_level1_rate: 0, // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô formatUnitsDisplay
      unit_level2_name: item.unit_level2_name,
      unit_level2_quantity: item.unit_level2_quantity || 0,
      unit_level2_rate: 0, // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô formatUnitsDisplay
      unit_level3_name: item.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô',
      unit_level3_quantity: item.unit_level3_quantity || 0
    });

    return display === '0' ? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å' : display;
  };

  // Debug: Log items when modal opens
  useEffect(() => {
    if (isOpen) {
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log('üì¶ Modal opened for location:', location);
      console.log('üì¶ Items received:', items);
      console.log('üì¶ Number of items:', items.length);
      console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
      items.forEach((item, index) => {
        const actualStock = getActualStock(item);
        const stockDisplay = getStockDisplay(item);

        console.log(`  ${index + 1}. Product: ${item.product_name}`);
        console.log(`      Location: ${item.location}`);
        console.log(`      SKU: ${item.sku || 'N/A'}`);
        console.log(`      Multi-level stock:`);
        console.log(`        - L1 (${item.unit_level1_name || '‡∏•‡∏±‡∏á'}): ${item.unit_level1_quantity || 0} √ó ${item.unit_level1_rate || 0} = ${(item.unit_level1_quantity || 0) * (item.unit_level1_rate || 0)} ‡∏ä‡∏¥‡πâ‡∏ô`);
        console.log(`        - L2 (${item.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á'}): ${item.unit_level2_quantity || 0} √ó ${item.unit_level2_rate || 0} = ${(item.unit_level2_quantity || 0) * (item.unit_level2_rate || 0)} ‡∏ä‡∏¥‡πâ‡∏ô`);
        console.log(`        - L3 (${item.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô'}): ${item.unit_level3_quantity || 0} ‡∏ä‡∏¥‡πâ‡∏ô`);
        console.log(`      Legacy fields:`);
        console.log(`        - carton_quantity_legacy: ${item.carton_quantity_legacy ?? 'null'}`);
        console.log(`        - box_quantity_legacy: ${item.box_quantity_legacy ?? 'null'}`);
        console.log(`        - pieces_quantity_legacy: ${item.pieces_quantity_legacy ?? 'null'}`);
        console.log(`      üìä Stock display: ${stockDisplay}`);
        console.log(`      ‚úÖ Total stock: ${actualStock} ‡∏ä‡∏¥‡πâ‡∏ô`);
        console.log('');
      });
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    }
  }, [isOpen, location, items]);

  // Fetch customers from database
  useEffect(() => {
    if (isOpen) {
      fetchCustomers();
    }
  }, [isOpen]);

  // Handle item selection
  useEffect(() => {
    if (formData.selectedItemId) {
      const item = items.find(i => i.id === formData.selectedItemId);
      setSelectedItem(item || null);

      // Validate stock when item is selected
      if (item && (formData.quantityLevel1 || formData.quantityLevel2 || formData.quantityLevel3)) {
        validateQuantities(item);
      }
    } else {
      setSelectedItem(null);
      setValidationError('');
    }
  }, [formData.selectedItemId, formData.quantityLevel1, formData.quantityLevel2, formData.quantityLevel3, items]);

  // Validation function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢
  const validateQuantities = (item: any) => {
    const reqLevel1 = parseInt(formData.quantityLevel1) || 0;
    const reqLevel2 = parseInt(formData.quantityLevel2) || 0;
    const reqLevel3 = parseInt(formData.quantityLevel3) || 0;

    const availLevel1 = item.unit_level1_quantity || 0;
    const availLevel2 = item.unit_level2_quantity || 0;
    const availLevel3 = item.unit_level3_quantity || 0;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢
    if (reqLevel1 === 0 && reqLevel2 === 0 && reqLevel3 === 0) {
      setValidationError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢');
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢
    if (reqLevel1 > availLevel1) {
      setValidationError(`‚ùå ${item.unit_level1_name || '‡∏•‡∏±‡∏á'}: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${reqLevel1} ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${availLevel1}`);
      return false;
    }
    if (reqLevel2 > availLevel2) {
      setValidationError(`‚ùå ${item.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á'}: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${reqLevel2} ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${availLevel2}`);
      return false;
    }
    if (reqLevel3 > availLevel3) {
      setValidationError(`‚ùå ${item.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô'}: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${reqLevel3} ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${availLevel3}`);
      return false;
    }

    setValidationError('');
    return true;
  };

  const fetchCustomers = async () => {
    setLoadingCustomers(true);
    try {
      const { data, error } = await supabase
        .from('customers')
        .select('id, customer_name, customer_code, phone, email')
        .eq('is_active', true)
        .order('customer_name');

      if (error) throw error;
      setCustomers(data || []);
    } catch (error) {
      console.error('Error fetching customers:', error);
      toast({
        title: '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        description: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        variant: 'destructive'
      });
    } finally {
      setLoadingCustomers(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const reqLevel1 = parseInt(formData.quantityLevel1) || 0;
    const reqLevel2 = parseInt(formData.quantityLevel2) || 0;
    const reqLevel3 = parseInt(formData.quantityLevel3) || 0;

    if (!formData.customerId || !formData.selectedItemId || (reqLevel1 === 0 && reqLevel2 === 0 && reqLevel3 === 0)) {
      toast({
        title: '‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö',
        description: '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤, ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢',
        variant: 'destructive'
      });
      return;
    }

    const selectedCustomer = customers.find(c => c.id === formData.customerId);
    if (!selectedCustomer) {
      toast({
        title: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        description: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å',
        variant: 'destructive'
      });
      return;
    }

    const selectedItem = items.find(item => item.id === formData.selectedItemId);
    if (!selectedItem) {
      toast({
        title: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        description: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å',
        variant: 'destructive'
      });
      return;
    }

    // Validate ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢
    if (!validateQuantities(selectedItem)) {
      toast({
        title: '‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        description: validationError,
        variant: 'destructive'
      });
      return;
    }

    setLoading(true);

    try {
      // 1. ‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á - ‡∏•‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
      const newLevel1 = (selectedItem.unit_level1_quantity || 0) - reqLevel1;
      const newLevel2 = (selectedItem.unit_level2_quantity || 0) - reqLevel2;
      const newLevel3 = (selectedItem.unit_level3_quantity || 0) - reqLevel3;

      const updateData: any = {
        unit_level1_quantity: newLevel1,
        unit_level2_quantity: newLevel2,
        unit_level3_quantity: newLevel3
      };

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
      const exportedTotal = (reqLevel1 * (selectedItem.unit_level1_rate || 0)) +
                           (reqLevel2 * (selectedItem.unit_level2_rate || 0)) +
                           reqLevel3;

      console.log('üìù Updating inventory:', {
        before: {
          level1: selectedItem.unit_level1_quantity,
          level2: selectedItem.unit_level2_quantity,
          level3: selectedItem.unit_level3_quantity
        },
        exported: {
          level1: reqLevel1,
          level2: reqLevel2,
          level3: reqLevel3,
          total: exportedTotal
        },
        after: {
          level1: newLevel1,
          level2: newLevel2,
          level3: newLevel3
        }
      });

      // 1b. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
      const { error: updateError } = await supabase
        .from('inventory_items')
        .update(updateData)
        .eq('id', formData.selectedItemId);

      if (updateError) throw updateError;

      // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö - ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å!)
      const exportDescription = [];
      if (reqLevel1 > 0) exportDescription.push(`${reqLevel1} ${selectedItem.unit_level1_name || '‡∏•‡∏±‡∏á'}`);
      if (reqLevel2 > 0) exportDescription.push(`${reqLevel2} ${selectedItem.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á'}`);
      if (reqLevel3 > 0) exportDescription.push(`${reqLevel3} ${selectedItem.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô'}`);

      const { error: movementError } = await supabase
        .from('inventory_movements')
        .insert({
          inventory_item_id: formData.selectedItemId,
          movement_type: 'out',
          quantity_boxes_before: selectedItem.unit_level1_quantity || 0,
          quantity_loose_before: selectedItem.unit_level2_quantity || 0,
          quantity_boxes_after: newLevel1,
          quantity_loose_after: newLevel2,
          quantity_boxes_change: -(reqLevel1),
          quantity_loose_change: -(reqLevel2),
          location_before: location,
          location_after: `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${selectedCustomer.customer_name}`,
          notes: `‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å ${exportDescription.join(' + ')} (‡∏£‡∏ß‡∏°: ${exportedTotal} ‡∏ä‡∏¥‡πâ‡∏ô) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${selectedCustomer.customer_name} (${selectedCustomer.customer_code})${formData.poReference ? ` - PO: ${formData.poReference}` : ''}${formData.notes ? ` - ${formData.notes}` : ''}`
        });

      if (movementError) {
        console.error('‚ùå Error inserting into inventory_movements:', movementError);
        throw movementError;
      }

      // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á customer_exports
      const unitPrice = parseFloat(formData.unitPrice) || null;
      const totalValue = unitPrice ? unitPrice * exportedTotal : null;

      console.log('üíæ [Export] Saving to customer_exports:', {
        customer: selectedCustomer.customer_name,
        product: selectedItem.product_name,
        quantity: exportedTotal,
        unit_price: unitPrice,
        total_value: totalValue
      });

      const { data: exportRecord, error: customerExportError } = await supabase
        .from('customer_exports')
        .insert({
          customer_id: formData.customerId,
          customer_name: selectedCustomer.customer_name,
          customer_code: selectedCustomer.customer_code,
          product_name: selectedItem.product_name,
          product_code: selectedItem.sku || null,
          inventory_item_id: formData.selectedItemId,
          quantity_exported: exportedTotal,
          unit: exportDescription.join(' + '),
          quantity_level1: reqLevel1,
          quantity_level2: reqLevel2,
          quantity_level3: reqLevel3,
          unit_level1_name: selectedItem.unit_level1_name || '‡∏•‡∏±‡∏á',
          unit_level2_name: selectedItem.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á',
          unit_level3_name: selectedItem.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô',
          unit_level1_rate: selectedItem.unit_level1_rate || 144,
          unit_level2_rate: selectedItem.unit_level2_rate || 12,
          from_location: location,
          notes: formData.notes || null,
          po_reference: formData.poReference || null,
          unit_price: unitPrice,
          total_value: totalValue,
          user_id: '00000000-0000-0000-0000-000000000000'
        })
        .select();

      if (customerExportError) {
        console.error('‚ùå [Export] Failed to save to customer_exports:', customerExportError);
        console.error('Error details:', JSON.stringify(customerExportError, null, 2));
        throw customerExportError; // Throw error ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ ignore
      }

      console.log('‚úÖ [Export] Successfully saved to customer_exports:', exportRecord);

      // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å event log
      await supabase
        .from('system_events')
        .insert({
          event_type: 'inventory',
          event_category: 'stock_movement',
          event_action: 'export',
          event_title: '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
          event_description: `‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${selectedItem.product_name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${exportedTotal} ‡∏ä‡∏¥‡πâ‡∏ô ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${selectedCustomer.customer_name}`,
          metadata: {
            item_id: formData.selectedItemId,
            product_name: selectedItem.product_name,
            quantity: exportedTotal,
            location: location,
            customer_id: formData.customerId,
            customer_name: selectedCustomer.customer_name,
            customer_code: selectedCustomer.customer_code,
            po_reference: formData.poReference,
            notes: formData.notes
          },
          user_id: '00000000-0000-0000-0000-000000000000'
        });

      // 5. ‡∏•‡∏ö inventory_item ‡∏ñ‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 0 (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß)
      const isStockZero = newLevel1 === 0 && newLevel2 === 0 && newLevel3 === 0;

      if (isStockZero) {
        console.log('üóëÔ∏è Stock is zero, deleting inventory item from location:', location);

        // 5a. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å event ‡∏ß‡πà‡∏≤ location ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
        await supabase
          .from('system_events')
          .insert({
            event_type: 'location',
            event_category: 'location_management',
            event_action: 'location_cleared',
            event_title: `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ${location} ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß`,
            event_description: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${selectedItem.product_name} ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å ${location} - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà`,
            metadata: {
              location: location,
              product_name: selectedItem.product_name,
              last_customer: selectedCustomer.customer_name,
              last_export_quantity: exportedTotal,
              cleared_at: new Date().toISOString()
            },
            location_context: location,
            status: 'success',
            user_id: '00000000-0000-0000-0000-000000000000'
          });

        // 5b. ‡∏•‡∏ö inventory_item
        const { error: deleteError } = await supabase
          .from('inventory_items')
          .delete()
          .eq('id', formData.selectedItemId);

        if (deleteError) {
          console.error('‚ùå Error deleting inventory item:', deleteError);
          // Don't throw - ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£
          console.warn('‚ö†Ô∏è Failed to delete but history was saved');
        } else {
          console.log('‚úÖ Successfully deleted inventory item (stock = 0)');
        }
      }

      // Reset form first
      setFormData({
        customerId: '',
        quantityLevel1: '',
        quantityLevel2: '',
        quantityLevel3: '',
        notes: '',
        selectedItemId: '',
        poReference: '',
        unitPrice: ''
      });

      // Show success toast with location status
      const locationStatus = isStockZero
        ? ` (${location} ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà)`
        : ` (${location} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏ï‡πá‡∏≠‡∏Å)`;

      toast({
        title: '‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        description: `‡∏™‡πà‡∏á ${selectedItem.product_name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${exportDescription.join(' + ')} (${exportedTotal.toLocaleString()} ‡∏ä‡∏¥‡πâ‡∏ô) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${selectedCustomer.customer_name} ‡πÅ‡∏•‡πâ‡∏ß${locationStatus}`,
        duration: 5000, // Show for 5 seconds
      });

      // Call refresh callback if provided
      if (onExportSuccess) {
        onExportSuccess();
      }

      // Close modal after a short delay to allow toast to render
      setTimeout(() => {
        onClose();
      }, 300);

    } catch (error) {
      console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.error('‚ùå ERROR EXPORTING ITEMS:');
      console.error('Error object:', error);
      console.error('Error type:', typeof error);
      console.error('Error keys:', error ? Object.keys(error) : 'null');

      if (error && typeof error === 'object') {
        console.error('Error details:', JSON.stringify(error, null, 2));
        console.error('Error event_title:', (error as any).message);
        console.error('Error code:', (error as any).code);
        console.error('Error hint:', (error as any).hint);
        console.error('Error details field:', (error as any).details);
      }

      console.error('Form data at time of error:', {
        customerId: formData.customerId,
        selectedItemId: formData.selectedItemId,
        quantityLevel1: formData.quantityLevel1,
        quantityLevel2: formData.quantityLevel2,
        quantityLevel3: formData.quantityLevel3
      });
      console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

      // Extract more detailed error message
      let errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ';

      if (error && typeof error === 'object') {
        const err = error as any;
        if (err.message) {
          errorMessage = err.message;
        }
        if (err.details) {
          errorMessage += ` (${err.details})`;
        }
      } else if (error instanceof Error) {
        errorMessage = error.message;
      }

      toast({
        title: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: errorMessage,
        variant: 'destructive',
        duration: 7000, // Show error longer
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md !bg-white">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Send className="h-5 w-5 text-red-600" />
            ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
          </DialogTitle>
          <DialogDescription>
            Location: <span className="font-semibold">{location}</span>
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Select Item */}
          <div className="space-y-2">
            <Label htmlFor="item">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ *</Label>
            {items.length === 0 ? (
              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertDescription className="text-sm">
                  ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô Location: {location}
                </AlertDescription>
              </Alert>
            ) : (
              <select
                id="item"
                value={formData.selectedItemId}
                onChange={(e) => setFormData({ ...formData, selectedItemId: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 font-mono text-sm"
                required
              >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ --</option>
                {items.map((item) => {
                  const stock = getActualStock(item);
                  const stockDisplay = getStockDisplay(item);
                  const hasStock = stock > 0;
                  return (
                    <option
                      key={item.id}
                      value={item.id}
                      disabled={!hasStock}
                    >
                      {item.product_name} @ {item.location} | SKU: {item.sku || 'N/A'} | {stockDisplay} (‡∏£‡∏ß‡∏°: {stock} ‡∏ä‡∏¥‡πâ‡∏ô) {!hasStock ? '‚ùå' : '‚úÖ'}
                    </option>
                  );
                })}
              </select>
            )}
          </div>

          {/* Selected Item Info */}
          {selectedItem && (
            <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm font-semibold text-blue-900">
                  üì¶ {selectedItem.product_name}
                </span>
                {getActualStock(selectedItem) === 0 && (
                  <span className="px-2 py-1 bg-red-100 text-red-700 text-xs font-semibold rounded">
                    ‚ö†Ô∏è ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏°‡∏î
                  </span>
                )}
              </div>
              <div className="space-y-1">
                <div className="flex items-center gap-2 text-xs text-blue-700">
                  <span>üìç Location:</span>
                  <span className="font-semibold">{selectedItem.location}</span>
                  <span className="text-blue-500">|</span>
                  <span>üè∑Ô∏è SKU:</span>
                  <span className="font-semibold">{selectedItem.sku || 'N/A'}</span>
                </div>
                <div className="pt-1 border-t border-blue-200">
                  <div className="text-xs font-semibold text-blue-800 mb-1">üìä ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</div>
                  <div className="pl-3 space-y-0.5 text-xs text-blue-700">
                    {(selectedItem.unit_level1_quantity || 0) > 0 && (
                      <div>‚Ä¢ {selectedItem.unit_level1_quantity} {selectedItem.unit_level1_name || '‡∏•‡∏±‡∏á'}
                        {selectedItem.unit_level1_rate > 0 && (
                          <span className="text-blue-500"> (1 {selectedItem.unit_level1_name} = {selectedItem.unit_level1_rate} ‡∏ä‡∏¥‡πâ‡∏ô)</span>
                        )}
                      </div>
                    )}
                    {(selectedItem.unit_level2_quantity || 0) > 0 && (
                      <div>‚Ä¢ {selectedItem.unit_level2_quantity} {selectedItem.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á'}
                        {selectedItem.unit_level2_rate > 0 && (
                          <span className="text-blue-500"> (1 {selectedItem.unit_level2_name} = {selectedItem.unit_level2_rate} ‡∏ä‡∏¥‡πâ‡∏ô)</span>
                        )}
                      </div>
                    )}
                    {(selectedItem.unit_level3_quantity || 0) > 0 && (
                      <div>‚Ä¢ {selectedItem.unit_level3_quantity} {selectedItem.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô'}</div>
                    )}
                    <div className="pt-1 font-semibold text-blue-900">
                      ‚úÖ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {getActualStock(selectedItem).toLocaleString('th-TH')} ‡∏ä‡∏¥‡πâ‡∏ô
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Select Customer */}
          <div className="space-y-2">
            <Label htmlFor="customer">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ *</Label>
            {loadingCustomers ? (
              <div className="flex items-center gap-2 p-2 text-sm text-muted-foreground">
                <Loader2 className="h-4 w-4 animate-spin" />
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...
              </div>
            ) : customers.length === 0 ? (
              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertDescription className="text-sm">
                  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                </AlertDescription>
              </Alert>
            ) : (
              <select
                id="customer"
                value={formData.customerId}
                onChange={(e) => setFormData({ ...formData, customerId: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                required
              >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ --</option>
                {customers.map((customer) => (
                  <option key={customer.id} value={customer.id}>
                    {customer.customer_name} ({customer.customer_code})
                    {customer.phone ? ` - ${customer.phone}` : ''}
                  </option>
                ))}
              </select>
            )}
          </div>

          {/* PO Reference */}
          <div className="space-y-2">
            <Label htmlFor="poReference">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (PO)</Label>
            <Input
              id="poReference"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô PO-2024-001"
              value={formData.poReference}
              onChange={(e) => setFormData({ ...formData, poReference: e.target.value })}
            />
          </div>

          {/* Unit Price */}
          <div className="space-y-2">
            <Label htmlFor="unitPrice">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó/‡∏ä‡∏¥‡πâ‡∏ô)</Label>
            <Input
              id="unitPrice"
              type="number"
              step="0.01"
              min="0"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô 25.50"
              value={formData.unitPrice}
              onChange={(e) => setFormData({ ...formData, unitPrice: e.target.value })}
            />
            {formData.unitPrice && selectedItem && (
              <p className="text-xs text-muted-foreground">
                ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°: {(parseFloat(formData.unitPrice) * (
                  (parseInt(formData.quantityLevel1) || 0) * (selectedItem.unit_level1_rate || 0) +
                  (parseInt(formData.quantityLevel2) || 0) * (selectedItem.unit_level2_rate || 0) +
                  (parseInt(formData.quantityLevel3) || 0)
                )).toLocaleString('th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‡∏ö‡∏≤‡∏ó
              </p>
            )}
          </div>

          {/* Quantity - ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏´‡∏ô‡πà‡∏ß‡∏¢ */}
          <div className="space-y-3">
            <Label className="font-semibold text-gray-900">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å *</Label>

            {selectedItem && (
              <div className="text-xs space-y-1 mb-2 p-2 bg-blue-50 rounded border border-blue-200">
                <p className="font-semibold text-blue-900">üìä ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</p>
                <p className="text-blue-700">{getStockDisplay(selectedItem)}</p>
                <p className="text-blue-600 font-semibold">‡∏£‡∏ß‡∏°: {getActualStock(selectedItem).toLocaleString('th-TH')} ‡∏ä‡∏¥‡πâ‡∏ô</p>
              </div>
            )}

            <div className="grid grid-cols-3 gap-3">
              {/* Level 1 - ‡∏•‡∏±‡∏á */}
              {selectedItem && (selectedItem.unit_level1_quantity > 0 || selectedItem.unit_level1_name) && (
                <div className="space-y-1">
                  <Label htmlFor="quantityLevel1" className="text-xs text-gray-600">
                    {selectedItem.unit_level1_name || '‡∏•‡∏±‡∏á'}
                    <span className="text-blue-500 ml-1">(‡∏™‡∏ï‡πá‡∏≠‡∏Å: {selectedItem.unit_level1_quantity || 0})</span>
                  </Label>
                  <Input
                    id="quantityLevel1"
                    type="number"
                    min="0"
                    max={selectedItem.unit_level1_quantity || 0}
                    placeholder="0"
                    value={formData.quantityLevel1}
                    onChange={(e) => setFormData({ ...formData, quantityLevel1: e.target.value })}
                    disabled={!selectedItem}
                    className="text-center"
                  />
                </div>
              )}

              {/* Level 2 - ‡∏Å‡∏•‡πà‡∏≠‡∏á */}
              {selectedItem && (selectedItem.unit_level2_quantity > 0 || selectedItem.unit_level2_name) && (
                <div className="space-y-1">
                  <Label htmlFor="quantityLevel2" className="text-xs text-gray-600">
                    {selectedItem.unit_level2_name || '‡∏Å‡∏•‡πà‡∏≠‡∏á'}
                    <span className="text-blue-500 ml-1">(‡∏™‡∏ï‡πá‡∏≠‡∏Å: {selectedItem.unit_level2_quantity || 0})</span>
                  </Label>
                  <Input
                    id="quantityLevel2"
                    type="number"
                    min="0"
                    max={selectedItem.unit_level2_quantity || 0}
                    placeholder="0"
                    value={formData.quantityLevel2}
                    onChange={(e) => setFormData({ ...formData, quantityLevel2: e.target.value })}
                    disabled={!selectedItem}
                    className="text-center"
                  />
                </div>
              )}

              {/* Level 3 - ‡∏ä‡∏¥‡πâ‡∏ô */}
              {selectedItem && (
                <div className="space-y-1">
                  <Label htmlFor="quantityLevel3" className="text-xs text-gray-600">
                    {selectedItem.unit_level3_name || '‡∏ä‡∏¥‡πâ‡∏ô'}
                    <span className="text-blue-500 ml-1">(‡∏™‡∏ï‡πá‡∏≠‡∏Å: {selectedItem.unit_level3_quantity || 0})</span>
                  </Label>
                  <Input
                    id="quantityLevel3"
                    type="number"
                    min="0"
                    max={selectedItem.unit_level3_quantity || 0}
                    placeholder="0"
                    value={formData.quantityLevel3}
                    onChange={(e) => setFormData({ ...formData, quantityLevel3: e.target.value })}
                    disabled={!selectedItem}
                    className="text-center"
                  />
                </div>
              )}
            </div>

            {validationError && (
              <Alert variant="destructive" className="py-2">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription className="text-sm">
                  {validationError}
                </AlertDescription>
              </Alert>
            )}
          </div>

          {/* Notes */}
          <div className="space-y-2">
            <Label htmlFor="notes">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</Label>
            <Textarea
              id="notes"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà PO-001"
              value={formData.notes}
              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
              rows={3}
            />
          </div>

          {/* Action Buttons */}
          <div className="flex gap-2 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              className="flex-1"
              disabled={loading}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button
              type="submit"
              className="flex-1 bg-red-600 hover:bg-red-700 disabled:bg-gray-400"
              disabled={
                loading ||
                !formData.customerId ||
                !formData.selectedItemId ||
                (!formData.quantityLevel1 && !formData.quantityLevel2 && !formData.quantityLevel3) ||
                !!validationError ||
                items.length === 0 ||
                (selectedItem && getActualStock(selectedItem) === 0)
              }
            >
              {loading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å...
                </>
              ) : (
                <>
                  <Send className="h-4 w-4 mr-2" />
                  ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                </>
              )}
            </Button>
          </div>
        </form>

        {items.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            <Package className="h-12 w-12 mx-auto mb-2 opacity-50" />
            <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô Location ‡∏ô‡∏µ‡πâ</p>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
