import { useQuery } from '@tanstack/react-query';

// API Base URL configuration (from .env)
const SALES_API_BASE = import.meta.env.VITE_SALES_API_URL || '/api';

/**
 * Sales Order Response Types
 */
export interface SalesOrder {
  docno: string;
  docdate: string | null;
  taxno: string | null;
  arcode: string | null;
  arname: string | null;
  totalamount: number | null;
}

export interface SalesLineItem {
  lineid: number;
  productcode: string | null;
  productname: string | null;
  quantity: number | null;
  unitname: string | null;
  unitprice: number | null;
  netamount: number | null;
}

export interface SalesOrderDetail extends SalesOrder {
  items: SalesLineItem[];
}

export interface SalesQueryParams {
  startDate?: string;
  endDate?: string;
  arcode?: string;
  docstatus?: string;
  limit?: number;
  offset?: number;
}

/**
 * Hook: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export function useSalesOrders(params?: SalesQueryParams) {
  return useQuery({
    queryKey: ['sales-orders', params],
    queryFn: async () => {
      console.log('üåê Fetching sales with params:', params);

      const queryParams = new URLSearchParams();

      if (params?.startDate) queryParams.append('startDate', params.startDate);
      if (params?.endDate) queryParams.append('endDate', params.endDate);
      if (params?.arcode) queryParams.append('arcode', params.arcode);
      if (params?.docstatus) queryParams.append('docstatus', params.docstatus);
      if (params?.limit) queryParams.append('limit', params.limit.toString());
      if (params?.offset) queryParams.append('offset', params.offset.toString());

      const url = `${SALES_API_BASE}/sales${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;
      console.log('üåê Fetching from:', url);

      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`Failed to fetch sales orders: ${response.statusText}`);
      }

      const data = await response.json();

      if (!data.success) {
        console.error('‚ùå API Error:', data.error);
        throw new Error(data.error || 'Failed to fetch sales orders');
      }

      console.log('‚úÖ Fetched sales orders:', data.data.length, 'orders');
      return data.data as SalesOrder[];
    },
    staleTime: 0, // ‡πÑ‡∏°‡πà cache - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà params ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    gcTime: 5 * 60 * 1000, // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  });
}

/**
 * Hook: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ö‡∏Ç‡∏≤‡∏¢ + ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 */
export function useSalesOrderDetail(docno: string | null) {
  return useQuery({
    queryKey: ['sales-order-detail', docno],
    queryFn: async () => {
      if (!docno) {
        throw new Error('Document number is required');
      }

      const url = `${SALES_API_BASE}/sales/${encodeURIComponent(docno)}`;

      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`Failed to fetch sales order: ${response.statusText}`);
      }

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'Failed to fetch sales order');
      }

      return data.data as SalesOrderDetail;
    },
    enabled: !!docno, // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ docno ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    staleTime: 60000, // 1 ‡∏ô‡∏≤‡∏ó‡∏µ
  });
}

/**
 * Hook: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
 */
export function useSalesStats(params?: { startDate?: string; endDate?: string }) {
  const { data: sales, isLoading, error } = useSalesOrders({
    ...params,
    limit: 5000, // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  });

  const stats = {
    totalSales: 0,
    totalOrders: 0,
    averageOrderValue: 0,
    paidAmount: 0,
    unpaidAmount: 0,
  };

  if (sales && sales.length > 0) {
    stats.totalOrders = sales.length;
    stats.totalSales = sales.reduce((sum, order) => sum + (order.totalamount || 0), 0);
    stats.averageOrderValue = stats.totalSales / stats.totalOrders;

    // Note: CSSALE ‡πÑ‡∏°‡πà‡∏°‡∏µ field PAIDAMOUNT, REMAINAMOUNT ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
    // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° fields ‡πÉ‡∏ô SQL query
  }

  return { stats, isLoading, error };
}

/**
 * Hook: ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü)
 */
export function useDailySales(days: number = 30) {
  const endDate = new Date();
  const startDate = new Date();
  startDate.setDate(startDate.getDate() - days);

  return useSalesOrders({
    startDate: startDate.toISOString().split('T')[0],
    endDate: endDate.toISOString().split('T')[0],
  });
}

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
 */
export interface DailySalesData {
  date: string; // YYYY-MM-DD
  totalAmount: number;
  orderCount: number;
}

/**
 * Hook: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÅ‡∏ö‡∏ö grouped ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
 * @param startDate - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (YYYY-MM-DD)
 * @param endDate - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (YYYY-MM-DD)
 * @returns ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö group by ‡∏ß‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏° loading/error states
 */
export function useDailySalesChart(startDate?: string, endDate?: string) {
  const { data: sales, isLoading, error } = useSalesOrders({
    startDate,
    endDate,
    limit: 5000, // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  });

  // Group ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  const chartData: DailySalesData[] = [];

  if (sales && sales.length > 0) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠ group ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const groupedByDate = new Map<string, { totalAmount: number; orderCount: number }>();

    sales.forEach(order => {
      if (!order.docdate) return;

      // ‡πÅ‡∏õ‡∏•‡∏á ISO date ‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
      const date = order.docdate.split('T')[0];
      const amount = order.totalamount || 0;

      if (groupedByDate.has(date)) {
        const existing = groupedByDate.get(date)!;
        existing.totalAmount += amount;
        existing.orderCount += 1;
      } else {
        groupedByDate.set(date, {
          totalAmount: amount,
          orderCount: 1,
        });
      }
    });

    // ‡πÅ‡∏õ‡∏•‡∏á Map ‡πÄ‡∏õ‡πá‡∏ô Array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    groupedByDate.forEach((value, date) => {
      chartData.push({
        date,
        totalAmount: value.totalAmount,
        orderCount: value.orderCount,
      });
    });

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
    chartData.sort((a, b) => a.date.localeCompare(b.date));
  }

  return {
    data: chartData,
    isLoading,
    error,
  };
}

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Top Customers
 */
export interface TopCustomer {
  arcode: string;
  arname: string;
  totalAmount: number;
  orderCount: number;
}

/**
 * Hook: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Top Customers ‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
 * @param startDate - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 * @param endDate - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
 * @param limit - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (default: 5)
 */
export function useTopCustomers(startDate?: string, endDate?: string, limit: number = 5) {
  const { data: sales, isLoading, error } = useSalesOrders({
    startDate,
    endDate,
    limit: 5000, // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  });

  const topCustomers: TopCustomer[] = [];

  if (sales && sales.length > 0) {
    // Group ‡∏ï‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const groupedByCustomer = new Map<string, { arcode: string; arname: string; totalAmount: number; orderCount: number }>();

    sales.forEach(order => {
      const arcode = order.arcode || 'UNKNOWN';
      const arname = order.arname || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';
      const amount = order.totalamount || 0;

      if (groupedByCustomer.has(arcode)) {
        const existing = groupedByCustomer.get(arcode)!;
        existing.totalAmount += amount;
        existing.orderCount += 1;
      } else {
        groupedByCustomer.set(arcode, {
          arcode,
          arname,
          totalAmount: amount,
          orderCount: 1,
        });
      }
    });

    // ‡πÅ‡∏õ‡∏•‡∏á Map ‡πÄ‡∏õ‡πá‡∏ô Array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
    const customersArray = Array.from(groupedByCustomer.values());
    customersArray.sort((a, b) => b.totalAmount - a.totalAmount);

    // ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà top N
    topCustomers.push(...customersArray.slice(0, limit));
  }

  return {
    data: topCustomers,
    isLoading,
    error,
  };
}

/**
 * Analytics API Response Types
 */
export interface AnalyticsPeriodData {
  totalSales?: number;
  totalPurchases?: number;
  totalQuantity: number;
  orderCount: number;
  avgOrderValue: number;
  dailyData: { date: string; amount: number; quantity: number }[];
  peakSalesDate?: string;
  peakSalesAmount?: number;
  peakPurchaseDate?: string;
  peakPurchaseAmount?: number;
}

export interface ProductComparisonResponse {
  current: AnalyticsPeriodData;
  previous: AnalyticsPeriodData;
  growth: {
    salesGrowth: number;
    quantityGrowth: number;
    orderGrowth: number;
    avgValueGrowth: number;
  };
  topCustomers: Array<{
    arcode: string;
    arname: string;
    totalAmount: number;
    quantity: number;
  }>;
  dailyComparison: Array<{
    date: string;
    current: number;
    previous: number;
  }>;
}

export interface CustomerComparisonResponse {
  current: AnalyticsPeriodData;
  previous: AnalyticsPeriodData;
  growth: {
    purchasesGrowth: number;
    quantityGrowth: number;
    orderGrowth: number;
    avgValueGrowth: number;
  };
  topProducts: Array<{
    productcode: string;
    productname: string;
    totalAmount: number;
    quantity: number;
  }>;
  dailyComparison: Array<{
    date: string;
    current: number;
    previous: number;
  }>;
}

/**
 * Hook: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Product Comparison)
 * ‡πÉ‡∏ä‡πâ Backend API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö aggregated queries ‡∏ó‡∏µ‡πà optimize ‡πÅ‡∏•‡πâ‡∏ß
 */
export function useProductComparisonAPI(
  productCode: string | null,
  currentStart: string,
  currentEnd: string,
  previousStart: string,
  previousEnd: string
) {
  return useQuery({
    queryKey: ['product-comparison', productCode, currentStart, currentEnd, previousStart, previousEnd],
    queryFn: async () => {
      if (!productCode) {
        throw new Error('Product code is required');
      }

      const params = new URLSearchParams({
        productCode,
        currentStart,
        currentEnd,
        previousStart,
        previousEnd
      });

      const url = `${SALES_API_BASE}/analytics/product-comparison?${params}`;
      console.log('üîç Fetching product comparison from:', url);

      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`Failed to fetch product comparison: ${response.statusText}`);
      }

      const result = await response.json();

      if (!result.success) {
        console.error('‚ùå API Error:', result.error);
        throw new Error(result.error || 'Failed to fetch product comparison');
      }

      console.log('‚úÖ Product comparison data:', result.data);
      return result.data as ProductComparisonResponse;
    },
    enabled: !!productCode, // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ productCode ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    staleTime: 60000, // 1 ‡∏ô‡∏≤‡∏ó‡∏µ
    gcTime: 5 * 60 * 1000, // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  });
}

/**
 * Hook: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (Customer Comparison)
 * ‡πÉ‡∏ä‡πâ Backend API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö aggregated queries ‡∏ó‡∏µ‡πà optimize ‡πÅ‡∏•‡πâ‡∏ß
 */
export function useCustomerComparisonAPI(
  arcode: string | null,
  currentStart: string,
  currentEnd: string,
  previousStart: string,
  previousEnd: string
) {
  return useQuery({
    queryKey: ['customer-comparison', arcode, currentStart, currentEnd, previousStart, previousEnd],
    queryFn: async () => {
      if (!arcode) {
        throw new Error('Customer code is required');
      }

      const params = new URLSearchParams({
        arcode,
        currentStart,
        currentEnd,
        previousStart,
        previousEnd
      });

      const url = `${SALES_API_BASE}/analytics/customer-comparison?${params}`;
      console.log('üîç Fetching customer comparison from:', url);

      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`Failed to fetch customer comparison: ${response.statusText}`);
      }

      const result = await response.json();

      if (!result.success) {
        console.error('‚ùå API Error:', result.error);
        throw new Error(result.error || 'Failed to fetch customer comparison');
      }

      console.log('‚úÖ Customer comparison data:', result.data);
      return result.data as CustomerComparisonResponse;
    },
    enabled: !!arcode, // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ arcode ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    staleTime: 60000, // 1 ‡∏ô‡∏≤‡∏ó‡∏µ
    gcTime: 5 * 60 * 1000, // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  });
}

/**
 * Product List Response Type
 */
export interface ProductListItem {
  productCode: string;
  productName: string;
  totalSales: number;
  totalQuantity: number;
}

/**
 * Customer List Response Type
 */
export interface CustomerListItem {
  arcode: string;
  arname: string;
  totalPurchases: number;
  orderCount: number;
}

/**
 * Hook: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown selection
 */
export function useProductList(startDate?: string, endDate?: string) {
  return useQuery({
    queryKey: ['product-list', startDate, endDate],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (startDate) params.append('startDate', startDate);
      if (endDate) params.append('endDate', endDate);

      const url = `${SALES_API_BASE}/analytics/products${params.toString() ? `?${params}` : ''}`;
      console.log('üîç Fetching product list from:', url);

      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`Failed to fetch product list: ${response.statusText}`);
      }

      const result = await response.json();

      if (!result.success) {
        console.error('‚ùå API Error:', result.error);
        throw new Error(result.error || 'Failed to fetch product list');
      }

      console.log('‚úÖ Product list loaded:', result.data.length, 'products');
      return result.data as ProductListItem[];
    },
    staleTime: 5 * 60 * 1000, // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    gcTime: 10 * 60 * 1000, // 10 ‡∏ô‡∏≤‡∏ó‡∏µ
  });
}

/**
 * Hook: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏ã‡∏∑‡πâ‡∏≠
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown selection
 */
export function useCustomerList(startDate?: string, endDate?: string) {
  return useQuery({
    queryKey: ['customer-list', startDate, endDate],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (startDate) params.append('startDate', startDate);
      if (endDate) params.append('endDate', endDate);

      const url = `${SALES_API_BASE}/analytics/customers${params.toString() ? `?${params}` : ''}`;
      console.log('üîç Fetching customer list from:', url);

      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`Failed to fetch customer list: ${response.statusText}`);
      }

      const result = await response.json();

      if (!result.success) {
        console.error('‚ùå API Error:', result.error);
        throw new Error(result.error || 'Failed to fetch customer list');
      }

      console.log('‚úÖ Customer list loaded:', result.data.length, 'customers');
      return result.data as CustomerListItem[];
    },
    staleTime: 5 * 60 * 1000, // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    gcTime: 10 * 60 * 1000, // 10 ‡∏ô‡∏≤‡∏ó‡∏µ
  });
}

/**
 * Sales Summary Response Type
 */
export interface SalesSummaryData {
  sales: {
    amount: number;
    count: number;
    docType: string;
  };
  creditNote: {
    amount: number;
    count: number;
    docType: string;
  };
  net: {
    amount: number;
    count: number;
    percentage: number;
  };
}

/**
 * Hook: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (SA vs CN)
 * ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢, ‡∏¢‡∏≠‡∏î CN, ‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
 */
export function useSalesSummary(startDate?: string, endDate?: string) {
  return useQuery({
    queryKey: ['sales-summary', startDate, endDate],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (startDate) params.append('startDate', startDate);
      if (endDate) params.append('endDate', endDate);

      const url = `${SALES_API_BASE}/analytics/sales-summary${params.toString() ? `?${params}` : ''}`;
      console.log('üîç Fetching sales summary from:', url);

      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`Failed to fetch sales summary: ${response.statusText}`);
      }

      const result = await response.json();

      if (!result.success) {
        console.error('‚ùå API Error:', result.error);
        throw new Error(result.error || 'Failed to fetch sales summary');
      }

      console.log('‚úÖ Sales summary loaded:', result.data);
      return result.data as SalesSummaryData;
    },
    staleTime: 5 * 60 * 1000, // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    gcTime: 10 * 60 * 1000, // 10 ‡∏ô‡∏≤‡∏ó‡∏µ
  });
}
