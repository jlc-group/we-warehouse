import { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { getCurrentUserId, ensureDemoUser } from '@/utils/authHelper';
import { gatherDebugInfo, logDebugInfo } from '@/utils/debugUtils';
import { clearCustomerMockDataFlags } from '@/utils/customerDebugUtils';

export interface Customer {
  id: string;
  customer_code: string;
  customer_name: string; // ‡πÉ‡∏ä‡πâ customer_name ‡πÅ‡∏ó‡∏ô name
  customer_type?: string;
  name?: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏° alias ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
  phone?: string;
  email?: string;
  address?: string;
  address_line1?: string;
  address_line2?: string;
  district?: string;
  province?: string;
  postal_code?: string;
  country?: string;
  contact_person?: string;
  company_name?: string; // alias ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer_name
  business_type?: string;
  tax_id?: string;
  credit_limit?: number;
  payment_terms?: number;
  is_active: boolean;
  notes?: string;
  tags?: string[];
  created_at: string;
  updated_at: string;
  created_by?: string;
  updated_by?: string;
}

export interface CreateCustomerData {
  name: string;
  phone?: string;
  email?: string;
  address?: string;
  contact_person?: string;
  company_name?: string;
  tax_id?: string;
  credit_limit?: number;
  payment_terms?: number;
  notes?: string;
}

export interface UpdateCustomerData extends Partial<CreateCustomerData> {
  is_active?: boolean;
}

export interface CustomerSearchParams {
  search?: string;
  is_active?: boolean;
  limit?: number;
  offset?: number;
}

// Fallback mock data for development when database is not available
const getMockCustomers = (): Customer[] => {
  const currentTime = new Date().toISOString();
  return [
    {
      id: 'mock-customer-1',
      name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
      phone: '02-123-4567',
      email: 'contact@abc.com',
      address: '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
      contact_person: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
      company_name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
      tax_id: '0123456789012',
      credit_limit: 100000,
      payment_terms: 30,
      is_active: true,
      notes: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥ - ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤',
      created_at: currentTime,
      updated_at: currentTime,
      created_by: 'demo-user',
      updated_by: 'demo-user'
    },
    {
      id: 'mock-customer-2',
      name: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏•‡∏µ‡∏Å XYZ',
      phone: '08-1234-5678',
      email: 'xyz@shop.com',
      address: '456 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
      contact_person: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏™‡∏∞‡∏≠‡∏≤‡∏î',
      company_name: '‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô XYZ',
      credit_limit: 50000,
      payment_terms: 15,
      is_active: true,
      notes: '‡∏Ç‡∏≤‡∏¢‡∏õ‡∏•‡∏µ‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∏‡∏õ‡πÇ‡∏†‡∏Ñ',
      created_at: currentTime,
      updated_at: currentTime,
      created_by: 'demo-user',
      updated_by: 'demo-user'
    },
    {
      id: 'mock-customer-3',
      name: '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° Grand Palace',
      phone: '02-987-6543',
      email: 'procurement@grandpalace.com',
      address: '789 ‡∏ñ‡∏ô‡∏ô‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 1 ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
      contact_person: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
      company_name: '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° Grand Palace Co., Ltd.',
      tax_id: '0987654321098',
      credit_limit: 200000,
      payment_terms: 45,
      is_active: true,
      notes: '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° 5 ‡∏î‡∏≤‡∏ß - ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏ç‡πà',
      created_at: currentTime,
      updated_at: currentTime,
      created_by: 'demo-user',
      updated_by: 'demo-user'
    }
  ];
};

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const useCustomers = (params?: CustomerSearchParams) => {
  return useQuery({
    queryKey: ['customers', params],
    queryFn: async (): Promise<Customer[]> => {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á flags ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ mock data
        console.log('üîç Checking for mock data flags...');
        clearCustomerMockDataFlags();

        // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ direct query ‡∏Å‡πà‡∏≠‡∏ô - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        console.log('üìä Attempting to fetch real customer data...');
        let query = supabase
          .from('customers')
          .select(`
            id,
            customer_code,
            customer_name,
            customer_type,
            phone,
            email,
            address_line1,
            address_line2,
            district,
            province,
            postal_code,
            country,
            contact_person,
            business_type,
            tax_id,
            credit_limit,
            payment_terms,
            is_active,
            notes,
            tags,
            created_at,
            updated_at,
            created_by,
            updated_by
          `)
          .order('customer_name', { ascending: true });

        // Filter by search term
        if (params?.search) {
          query = query.or(`customer_name.ilike.%${params.search}%,phone.ilike.%${params.search}%,email.ilike.%${params.search}%,customer_code.ilike.%${params.search}%,contact_person.ilike.%${params.search}%`);
        }

        // Filter by active status
        if (params?.is_active !== undefined) {
          query = query.eq('is_active', params.is_active);
        }

        // Pagination - ‡πÄ‡∏û‡∏¥‡πà‡∏° default limit ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
        const defaultLimit = params?.limit || 100; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 50 ‡πÄ‡∏õ‡πá‡∏ô 100

        if (params?.limit) {
          query = query.limit(params.limit);
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ limit ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 100 records
          query = query.limit(defaultLimit);
        }

        if (params?.offset) {
          query = query.range(params.offset, params.offset + (params.limit || defaultLimit) - 1);
        }

        const { data, error } = await query;

        if (error) {
          throw error;
        }

        console.log('‚úÖ Successfully loaded customers from database:', data?.length || 0);

        // Transform ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö interface Customer
        const transformedData = data?.map((customer: any): Customer => ({
          ...customer,
          name: customer.customer_name, // alias ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
          company_name: customer.customer_name, // alias
          address: customer.address_line1 || '', // ‡∏£‡∏ß‡∏° address
        })) || [];

        // ‡πÅ‡∏™‡∏î‡∏á success message ‡πÅ‡∏•‡∏∞‡∏•‡∏ö flags ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤
        if (transformedData.length > 0) {
          // ‡∏•‡∏ö flags ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ mock data
          localStorage.removeItem('customers_migration_warning_shown');
          localStorage.removeItem('database-error-flag');
          localStorage.removeItem('sales-system-error');

          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ flag ‡∏à‡∏≥‡∏Å‡∏±‡∏î)
          console.log(`üéâ SUCCESS: Found ${transformedData.length} customers in database - using REAL DATA!`);
          console.log('üìã Real customer names:', transformedData.slice(0, 3).map(c => c.customer_name).join(', '));
          console.log('üè¢ Customer codes:', transformedData.slice(0, 3).map(c => c.customer_code).join(', '));

          // ‡πÅ‡∏™‡∏î‡∏á toast ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å mock data
          const wasUsingMock = localStorage.getItem('was-using-mock-data');
          if (wasUsingMock || !localStorage.getItem('customers_loaded_success_shown')) {
            toast.success('üéâ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß!', {
              description: `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${transformedData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers`,
              duration: 5000
            });
            localStorage.removeItem('was-using-mock-data');
            localStorage.setItem('customers_loaded_success_shown', 'true');
          }
        } else if (data && data.length === 0) {
          console.log('‚ö†Ô∏è Database connected but no customers found');
          toast.info('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', {
            description: '‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers',
            duration: 3000
          });
        }

        return transformedData;

      } catch (error: any) {
        // Enhanced error handling with debug info gathering
        const errorMessage = error?.message || error?.toString() || 'Unknown error';
        const is404Error = errorMessage.includes('404') || errorMessage.includes('does not exist') || errorMessage.includes('relation');
        const is400Error = errorMessage.includes('400') || errorMessage.includes('Bad Request') || errorMessage.includes('relationship');
        const isConnectionError = errorMessage.includes('fetch') || errorMessage.includes('network') || errorMessage.includes('Failed to fetch');

        console.warn('‚ö†Ô∏è Error fetching customers from database:', errorMessage);

        // Gather debug information when error occurs
        try {
          const debugInfo = await gatherDebugInfo();
          logDebugInfo(debugInfo);
        } catch (debugError) {
          console.warn('Could not gather debug info:', debugError);
        }

        if (is404Error || is400Error) {
          console.error('‚ùå CRITICAL: Customers table not found or inaccessible!');
          console.error('Raw error:', error);

          // ‡πÅ‡∏™‡∏î‡∏á toast ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customers table
          if (!localStorage.getItem('customers_migration_warning_shown')) {
            toast.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers', {
              description: '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ',
              duration: 10000,
              action: {
                label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                onClick: () => {
                  console.log('Navigate to database check');
                }
              }
            });
            localStorage.setItem('customers_migration_warning_shown', 'true');
          }

          // ‡∏ï‡∏±‡πâ‡∏á flag ‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ mock data ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
          localStorage.setItem('was-using-mock-data', 'true');

          // Return filtered mock data ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
          console.warn('üèÉ‚Äç‚ôÇÔ∏è FALLBACK: Using mock data as last resort');
          let mockData = getMockCustomers();

          // Apply search filter to mock data
          if (params?.search) {
            const searchLower = params.search.toLowerCase();
            mockData = mockData.filter(customer =>
              customer.name.toLowerCase().includes(searchLower) ||
              customer.phone?.toLowerCase().includes(searchLower) ||
              customer.email?.toLowerCase().includes(searchLower) ||
              customer.company_name?.toLowerCase().includes(searchLower)
            );
          }

          // Apply active filter to mock data
          if (params?.is_active !== undefined) {
            mockData = mockData.filter(customer => customer.is_active === params.is_active);
          }

          // Apply pagination to mock data
          if (params?.offset || params?.limit) {
            const start = params?.offset || 0;
            const end = start + (params?.limit || 50);
            mockData = mockData.slice(start, end);
          }

          console.log('üìã Using mock customers data:', mockData.length);
          return mockData;

        } else if (isConnectionError) {
          console.error('Connection error fetching customers:', errorMessage);
          toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', {
            description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï',
            duration: 5000
          });

          // Return mock data for connection errors only
          return getMockCustomers();
        }

        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ return mock data ‡πÅ‡∏ï‡πà‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        console.error('Unexpected error fetching customers, using fallback data:', errorMessage);

        toast.warning('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', {
          description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ apply migration script',
          duration: 5000,
          action: {
            label: '‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç',
            onClick: () => {
              console.log('Navigate to migration troubleshooting');
            }
          }
        });

        return getMockCustomers();
      }
    },
    staleTime: 5 * 60 * 1000, // 5 minutes
    retry: false, // ‡πÑ‡∏°‡πà retry ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ fallback ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
  });
};

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
export const useCustomer = (id: string) => {
  return useQuery({
    queryKey: ['customer', id],
    queryFn: async (): Promise<Customer | null> => {
      if (!id) return null;

      try {
        const { data, error } = await supabase
          .from('customers')
          .select(`
            id,
            name,
            phone,
            email,
            address,
            contact_person,
            company_name,
            tax_id,
            credit_limit,
            payment_terms,
            is_active,
            notes,
            created_at,
            updated_at,
            created_by,
            updated_by
          `)
          .eq('id', id)
          .single();

        if (error) {
          if (error.code === 'PGRST116') return null; // Not found
          throw error;
        }

        console.log('‚úÖ Successfully fetched customer from database:', id);
        return data;

      } catch (error: any) {
        const errorMessage = error?.message || error?.toString() || 'Unknown error';
        const is404Error = errorMessage.includes('404') || errorMessage.includes('does not exist') || errorMessage.includes('relation');
        const is400Error = errorMessage.includes('400') || errorMessage.includes('Bad Request');

        if (is404Error || is400Error) {
          console.warn('üîß Customers table not found. Checking mock data for:', id);

          // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô mock data
          const mockCustomers = getMockCustomers();
          const mockCustomer = mockCustomers.find(customer => customer.id === id);

          if (mockCustomer) {
            console.log('üìã Found customer in mock data:', id);
            return mockCustomer;
          }
        }

        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô mock data
        console.error('Error fetching customer, returning null:', errorMessage);
        return null;
      }
    },
    enabled: !!id,
    retry: false, // ‡πÑ‡∏°‡πà retry ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ fallback ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
  });
};

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
export const useCreateCustomer = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (customerData: CreateCustomerData): Promise<Customer> => {
      // ‡πÉ‡∏ä‡πâ auth helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ authentication
      ensureDemoUser(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á demo user ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
      const userId = await getCurrentUserId();

      const { data, error } = await supabase
        .from('customers')
        .insert({
          ...customerData,
          created_by: userId,
          updated_by: userId,
        })
        .select()
        .single();

      if (error) {
        throw new Error(`Error creating customer: ${error.message}`);
      }

      return data;
    },
    onSuccess: (newCustomer) => {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cache
      queryClient.invalidateQueries({ queryKey: ['customers'] });

      toast.success('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', {
        description: `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${newCustomer.name}`,
      });
    },
    onError: (error) => {
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', {
        description: error.message,
      });
    },
  });
};

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
export const useUpdateCustomer = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ id, ...updateData }: UpdateCustomerData & { id: string }): Promise<Customer> => {
      const userId = await getCurrentUserId();

      const { data, error } = await supabase
        .from('customers')
        .update({
          ...updateData,
          updated_by: userId,
        })
        .eq('id', id)
        .select()
        .single();

      if (error) {
        throw new Error(`Error updating customer: ${error.message}`);
      }

      return data;
    },
    onSuccess: (updatedCustomer) => {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cache
      queryClient.invalidateQueries({ queryKey: ['customers'] });
      queryClient.invalidateQueries({ queryKey: ['customer', updatedCustomer.id] });

      toast.success('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', {
        description: `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${updatedCustomer.name}`,
      });
    },
    onError: (error) => {
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', {
        description: error.message,
      });
    },
  });
};

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (soft delete)
export const useDeleteCustomer = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (id: string): Promise<void> => {
      const { data: { user } } = await supabase.auth.getUser();

      // Soft delete ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ set is_active = false
      const { error } = await supabase
        .from('customers')
        .update({
          is_active: false,
          updated_by: user?.id,
        })
        .eq('id', id);

      if (error) {
        throw new Error(`Error deleting customer: ${error.message}`);
      }
    },
    onSuccess: () => {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cache
      queryClient.invalidateQueries({ queryKey: ['customers'] });

      toast.success('‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    },
    onError: (error) => {
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', {
        description: error.message,
      });
    },
  });
};

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (real-time search)
export const useCustomerSearch = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState('');

  // Debounce search term
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchTerm(searchTerm);
    }, 300);

    return () => clearTimeout(timer);
  }, [searchTerm]);

  const { data: customers, isLoading } = useCustomers({
    search: debouncedSearchTerm,
    is_active: true,
    limit: 1000, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
  });

  return {
    searchTerm,
    setSearchTerm,
    customers: customers || [],
    isLoading,
  };
};

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
export const useActiveCustomers = () => {
  return useCustomers({ is_active: true });
};

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
export const useCustomerStats = () => {
  return useQuery({
    queryKey: ['customer-stats'],
    queryFn: async () => {
      const [
        { count: totalCustomers },
        { count: activeCustomers },
        { count: inactiveCustomers }
      ] = await Promise.all([
        supabase.from('customers').select('*', { count: 'exact', head: true }),
        supabase.from('customers').select('*', { count: 'exact', head: true }).eq('is_active', true),
        supabase.from('customers').select('*', { count: 'exact', head: true }).eq('is_active', false),
      ]);

      return {
        total: totalCustomers || 0,
        active: activeCustomers || 0,
        inactive: inactiveCustomers || 0,
      };
    },
    staleTime: 10 * 60 * 1000, // 10 minutes
  });
};

// Utility functions
export const formatCustomerDisplay = (customer: Customer): string => {
  const parts = [customer.name];
  if (customer.company_name && customer.company_name !== customer.name) {
    parts.push(`(${customer.company_name})`);
  }
  if (customer.phone) {
    parts.push(customer.phone);
  }
  return parts.join(' ');
};

export const validateCustomerData = (data: CreateCustomerData): string[] => {
  const errors: string[] = [];

  if (!data.name?.trim()) {
    errors.push('‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏');
  }

  if (data.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
    errors.push('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
  }

  if (data.phone && !/^[0-9\-+()\\s]+$/.test(data.phone)) {
    errors.push('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
  }

  if (data.credit_limit && data.credit_limit < 0) {
    errors.push('‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0');
  }

  if (data.payment_terms && data.payment_terms <= 0) {
    errors.push('‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏ß‡∏±‡∏ô');
  }

  return errors;
};

export default {
  useCustomers,
  useCustomer,
  useCreateCustomer,
  useUpdateCustomer,
  useDeleteCustomer,
  useCustomerSearch,
  useActiveCustomers,
  useCustomerStats,
  formatCustomerDisplay,
  validateCustomerData,
};