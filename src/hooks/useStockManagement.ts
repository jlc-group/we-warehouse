import { supabase } from '@/integrations/supabase/client';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á - ‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
export async function deductStock(inventoryItemId: string, quantities: {
  level1: number;
  level2: number;
  level3: number;
}) {
  console.log('üì¶ Deducting stock for item:', inventoryItemId, quantities);

  // ‡∏î‡∏∂‡∏á‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const { data: currentItem, error: fetchError } = await supabase
    .from('inventory_items')
    .select('id, product_name, unit_level1_quantity, unit_level2_quantity, unit_level3_quantity')
    .eq('id', inventoryItemId)
    .single();

  if (fetchError) {
    console.error('‚ùå Error fetching current stock:', fetchError);
    throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
  const newLevel1 = (currentItem.unit_level1_quantity || 0) - quantities.level1;
  const newLevel2 = (currentItem.unit_level2_quantity || 0) - quantities.level2;
  const newLevel3 = (currentItem.unit_level3_quantity || 0) - quantities.level3;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
  if (newLevel1 < 0 || newLevel2 < 0 || newLevel3 < 0) {
    throw new Error(`‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${currentItem.product_name}`);
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å
  const { error: updateError } = await supabase
    .from('inventory_items')
    .update({
      unit_level1_quantity: newLevel1,
      unit_level2_quantity: newLevel2,
      unit_level3_quantity: newLevel3,
      updated_at: new Date().toISOString()
    })
    .eq('id', inventoryItemId);

  if (updateError) {
    console.error('‚ùå Error updating stock:', updateError);
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á ${currentItem.product_name}`);
  }

  console.log('‚úÖ Stock deducted successfully for:', currentItem.product_name);
  return {
    success: true,
    newQuantities: {
      level1: newLevel1,
      level2: newLevel2,
      level3: newLevel3
    }
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
export async function validateStock(inventoryItemId: string, requiredQuantities: {
  level1: number;
  level2: number;
  level3: number;
}) {
  const { data: item, error } = await supabase
    .from('inventory_items')
    .select('id, product_name, unit_level1_quantity, unit_level2_quantity, unit_level3_quantity')
    .eq('id', inventoryItemId)
    .single();

  if (error) {
    throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å');
  }

  const available1 = item.unit_level1_quantity || 0;
  const available2 = item.unit_level2_quantity || 0;
  const available3 = item.unit_level3_quantity || 0;

  if (requiredQuantities.level1 > available1) {
    throw new Error(`‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠: ${item.product_name} ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${requiredQuantities.level1} ‡∏•‡∏±‡∏á ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${available1} ‡∏•‡∏±‡∏á`);
  }

  if (requiredQuantities.level2 > available2) {
    throw new Error(`‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠: ${item.product_name} ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${requiredQuantities.level2} ‡πÄ‡∏®‡∏© ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${available2} ‡πÄ‡∏®‡∏©`);
  }

  if (requiredQuantities.level3 > available3) {
    throw new Error(`‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠: ${item.product_name} ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${requiredQuantities.level3} ‡∏ä‡∏¥‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${available3} ‡∏ä‡∏¥‡πâ‡∏ô`);
  }

  return true;
}
