import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

// User interface matching actual database schema
export interface User {
  id: string;
  email: string;
  password_hash?: string;
  full_name: string;
  department: string;
  role: string;
  role_level: number;
  employee_code?: string;
  phone?: string;
  avatar_url?: string;
  is_active: boolean;
  last_login?: string;
  login_attempts?: number;
  locked_until?: string;
  created_at: string;
  updated_at: string;
}

export interface UserInsert {
  email: string;
  password_hash?: string;
  full_name: string;
  department: string;
  role: string;
  role_level: number;
  employee_code?: string;
  phone?: string;
  avatar_url?: string;
  is_active?: boolean;
}

export interface UserUpdate {
  email?: string;
  password_hash?: string;
  full_name?: string;
  department?: string;
  role?: string;
  role_level?: number;
  employee_code?: string;
  phone?: string;
  avatar_url?: string;
  is_active?: boolean;
}

// Hook for fetching all users
export function useUsers() {
  return useQuery({
    queryKey: ['users'],
    queryFn: async (): Promise<User[]> => {
      console.log('üîç Fetching users from database...');

      try {
        const { data, error } = await supabase
          .from('users')
          .select('*')
          .order('role_level', { ascending: true });

        if (error) {
          console.error('‚ùå Error fetching users:', error);

          // Provide more helpful error messages
          if (error.code === '42P01') {
            throw new Error('‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ migration ‡∏Å‡πà‡∏≠‡∏ô');
          } else if (error.code === '42501') {
            throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á users - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RLS policies');
          } else if (error.message.includes('row-level security')) {
            throw new Error('RLS policies ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô fix_users_rls.sql');
          }

          throw new Error(`Database error: ${error.message} (Code: ${error.code})`);
        }

        console.log('‚úÖ Fetched users from table:', data?.length || 0);
        console.log('üìã Users data preview:', data?.slice(0, 2));
        return (data || []) as User[];

      } catch (error: any) {
        console.error('‚ùå Failed to fetch users:', error);

        // Re-throw with better error message
        if (error.message) {
          throw error;
        } else {
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
        }
      }
    },
    staleTime: 1000 * 60 * 5, // 5 minutes
    refetchInterval: false, // Disable auto refetch for now
    retry: (failureCount, error: any) => {
      // Don't retry on permission errors
      if (error?.message?.includes('RLS') || error?.message?.includes('permission')) {
        return false;
      }
      return failureCount < 2;
    },
  });
}

// Hook for fetching single user
export function useUser(userId: string) {
  return useQuery({
    queryKey: ['user', userId],
    queryFn: async (): Promise<User | null> => {
      console.log('üîç Fetching user by ID:', userId);

      try {
        const { data, error } = await supabase
          .from('users')
          .select('*')
          .eq('id', userId)
          .single();

        if (error) {
          if (error.code === 'PGRST116') {
            // Not found
            return null;
          }
          throw error;
        }

        return data as User;
      } catch (error) {
        console.error('‚ùå Failed to fetch user:', error);
        throw error;
      }
    },
    enabled: !!userId,
    staleTime: 1000 * 60 * 5, // 5 minutes
  });
}

// Hook for creating users
export function useCreateUser() {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async (userData: UserInsert): Promise<User> => {
      console.log('‚ûï Creating new user:', userData.email);

      const { data, error } = await supabase
        .from('users')
        .insert({
          ...userData,
          password_hash: userData.password_hash || 'temp_password_hash',
          is_active: userData.is_active !== undefined ? userData.is_active : true,
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error creating user:', error);
        throw error;
      }

      return data as User;
    },
    onSuccess: (newUser) => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
      toast({
        title: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        description: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${newUser.full_name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      });
    },
    onError: (error: any) => {
      toast({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: ${error.message}`,
        variant: 'destructive',
      });
    },
  });
}

// Hook for updating users
export function useUpdateUser() {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async ({ userId, updates }: { userId: string; updates: UserUpdate }): Promise<User> => {
      console.log('‚úèÔ∏è Updating user:', userId, updates);

      const { data, error } = await supabase
        .from('users')
        .update(updates)
        .eq('id', userId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error updating user:', error);
        throw error;
      }

      return data as User;
    },
    onSuccess: (updatedUser) => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
      queryClient.invalidateQueries({ queryKey: ['user', updatedUser.id] });
      toast({
        title: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        description: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${updatedUser.full_name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      });
    },
    onError: (error: any) => {
      toast({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: ${error.message}`,
        variant: 'destructive',
      });
    },
  });
}

// Hook for deleting users
export function useDeleteUser() {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async (userId: string): Promise<void> => {
      console.log('üóëÔ∏è Deleting user:', userId);

      const { error } = await supabase
        .from('users')
        .delete()
        .eq('id', userId);

      if (error) {
        console.error('‚ùå Error deleting user:', error);
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
      toast({
        title: '‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        description: '‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      });
    },
    onError: (error: any) => {
      toast({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: ${error.message}`,
        variant: 'destructive',
      });
    },
  });
}

// Hook for toggling user status
export function useToggleUserStatus() {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async ({ userId, isActive }: { userId: string; isActive: boolean }): Promise<User> => {
      console.log('üîÑ Toggling user status:', userId, isActive);

      const { data, error } = await supabase
        .from('users')
        .update({ is_active: isActive })
        .eq('id', userId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error toggling user status:', error);
        throw error;
      }

      return data as User;
    },
    onSuccess: (updatedUser) => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
      queryClient.invalidateQueries({ queryKey: ['user', updatedUser.id] });
      toast({
        title: updatedUser.is_active ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' : '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        description: `${updatedUser.full_name} ‡∏ñ‡∏π‡∏Å${updatedUser.is_active ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'}‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
      });
    },
    onError: (error: any) => {
      toast({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: ${error.message}`,
        variant: 'destructive',
      });
    },
  });
}

// Hook for updating last login
export function useUpdateLastLogin() {
  return useMutation({
    mutationFn: async (userId: string): Promise<void> => {
      console.log('üîÑ Updating last login for user:', userId);

      const { error } = await supabase
        .from('users')
        .update({
          last_login: new Date().toISOString(),
          login_attempts: 0,
        })
        .eq('id', userId);

      if (error) {
        console.error('‚ùå Error updating last login:', error);
        throw error;
      }
    },
  });
}

// Utility functions
export const getUserRoleColor = (roleLevel: number) => {
  switch (roleLevel) {
    case 1: return 'bg-red-100 text-red-800'; // Super Admin
    case 2: return 'bg-blue-100 text-blue-800'; // Manager
    case 3: return 'bg-green-100 text-green-800'; // Supervisor
    case 4: return 'bg-yellow-100 text-yellow-800'; // Staff
    case 5: return 'bg-gray-100 text-gray-800'; // Read Only
    default: return 'bg-gray-100 text-gray-800';
  }
};

export const getPermissionLabels = (roleLevel: number) => {
  switch (roleLevel) {
    case 1: return ['‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•', '‡∏≠‡πà‡∏≤‡∏ô', '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô', '‡∏•‡∏ö'];
    case 2: return ['‡∏≠‡πà‡∏≤‡∏ô', '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô', '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á'];
    case 3: return ['‡∏≠‡πà‡∏≤‡∏ô', '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô'];
    case 4: return ['‡∏≠‡πà‡∏≤‡∏ô'];
    case 5: return ['‡∏≠‡πà‡∏≤‡∏ô'];
    default: return ['‡∏≠‡πà‡∏≤‡∏ô'];
  }
};

export const getDepartments = () => [
  '‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£',
  '‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
  '‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠',
  '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û',
  '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
  '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
];

export const getRoles = () => [
  '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
  '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á',
  '‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å',
  '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà',
  '‡∏ú‡∏π‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß'
];