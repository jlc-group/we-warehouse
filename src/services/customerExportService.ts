import { supabase } from '@/integrations/supabase/client';

export interface CustomerExportStats {
  customer_id: string;
  customer_name: string;
  customer_code: string;
  total_orders: number;
  total_amount: number;
  total_items: number;
  last_order_date: string | null;
  orders: Array<{
    id: string;
    order_number: string;
    order_date: string;
    status: string;
    total_amount: number;
    items_count: number;
  }>;
}

export class CustomerExportService {
  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á customer_exports
   */
  static async getCustomerExportStats(
    startDate?: string,
    endDate?: string
  ): Promise<CustomerExportStats[]> {
    try {
      console.log('üìä Fetching customer export stats from customer_exports...');
      const startTime = performance.now();

      // Step 1: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const { data: customers, error: customersError } = await supabase
        .from('customers')
        .select('id, customer_name, customer_code')
        .order('customer_name');

      if (customersError) {
        console.error('Error fetching customers:', customersError);
        throw customersError;
      }

      if (!customers || customers.length === 0) {
        console.log('No customers found');
        return [];
      }

      console.log(`Found ${customers.length} customers`);

      // Step 2: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å customer_exports
      let exportsQuery = supabase
        .from('customer_exports')
        .select('*')
        .order('created_at', { ascending: false });

      // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      if (startDate) {
        exportsQuery = exportsQuery.gte('created_at', startDate);
      }
      if (endDate) {
        exportsQuery = exportsQuery.lte('created_at', endDate);
      }

      const { data: exports, error: exportsError } = await exportsQuery;

      if (exportsError) {
        console.error('Error fetching customer exports:', exportsError);
        throw exportsError;
      }

      console.log(`Found ${exports?.length || 0} export records`);

      if (!exports || exports.length === 0) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á
        return customers.map((c: any) => ({
          customer_id: c.id,
          customer_name: c.customer_name,
          customer_code: c.customer_code,
          total_orders: 0,
          total_amount: 0,
          total_items: 0,
          last_order_date: null,
          orders: [],
        }));
      }

      // Step 3: ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° customer
      const customerMap = new Map<string, CustomerExportStats>();

      // Initialize all customers
      customers.forEach((customer: any) => {
        customerMap.set(customer.id, {
          customer_id: customer.id,
          customer_name: customer.customer_name,
          customer_code: customer.customer_code,
          total_orders: 0,
          total_amount: 0,
          total_items: 0,
          last_order_date: null,
          orders: [],
        });
      });

      // Step 4: ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å "order" (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà + ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ + PO)
      const orderGroupMap = new Map<string, {
        customer_id: string;
        export_date: string;
        po_reference: string | null;
        exports: any[];
      }>();

      exports.forEach((exp: any) => {
        const exportDate = exp.created_at?.split('T')[0] || '';
        const groupKey = `${exp.customer_id}_${exportDate}_${exp.po_reference || 'NO_PO'}`;
        
        if (!orderGroupMap.has(groupKey)) {
          orderGroupMap.set(groupKey, {
            customer_id: exp.customer_id || '',
            export_date: exportDate,
            po_reference: exp.po_reference,
            exports: []
          });
        }
        
        orderGroupMap.get(groupKey)!.exports.push(exp);
      });

      // Step 5: ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      orderGroupMap.forEach((orderGroup) => {
        const stats = customerMap.get(orderGroup.customer_id);
        if (!stats) {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
          const firstExport = orderGroup.exports[0];
          customerMap.set(orderGroup.customer_id, {
            customer_id: orderGroup.customer_id,
            customer_name: firstExport.customer_name || 'Unknown',
            customer_code: firstExport.customer_code || 'N/A',
            total_orders: 0,
            total_amount: 0,
            total_items: 0,
            last_order_date: null,
            orders: [],
          });
        }

        const customerStats = customerMap.get(orderGroup.customer_id)!;
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á order ‡∏ô‡∏µ‡πâ
        const orderTotal = orderGroup.exports.reduce((sum, exp) => sum + (exp.total_value || 0), 0);
        const itemsCount = orderGroup.exports.length;
        
        customerStats.total_orders += 1;
        customerStats.total_amount += orderTotal;
        customerStats.total_items += itemsCount;

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if (!customerStats.last_order_date || orderGroup.export_date > customerStats.last_order_date) {
          customerStats.last_order_date = orderGroup.export_date;
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á "order" ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
        const firstExport = orderGroup.exports[0];
        customerStats.orders.push({
          id: firstExport.id,
          order_number: orderGroup.po_reference || `EXP-${orderGroup.export_date}`,
          order_date: orderGroup.export_date,
          status: 'delivered', // ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
          total_amount: orderTotal,
          items_count: itemsCount,
        });
      });

      const result = Array.from(customerMap.values())
        .filter(c => c.total_orders > 0) // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
        .sort((a, b) => b.total_amount - a.total_amount);

      const endTime = performance.now();
      console.log(`‚úÖ Processed ${result.length} customers with exports in ${(endTime - startTime).toFixed(2)}ms`);

      return result;
    } catch (error) {
      console.error('Error in getCustomerExportStats:', error);
      throw error;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢ (‡∏à‡∏≤‡∏Å customer_exports)
   */
  static async getCustomerExportDetails(customerId: string) {
    try {
      const { data: customer, error: customerError } = await supabase
        .from('customers')
        .select('*')
        .eq('id', customerId)
        .single();

      if (customerError) throw customerError;

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å customer_exports ‡πÅ‡∏ó‡∏ô customer_orders
      const { data: exports, error: exportsError } = await (supabase as any)
        .from('customer_exports')
        .select('*')
        .eq('customer_id', customerId)
        .order('created_at', { ascending: false });

      if (exportsError) throw exportsError;

      // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞ PO
      const orderGroups = new Map<string, any[]>();
      
      exports?.forEach((exp: any) => {
        const exportDate = exp.created_at?.split('T')[0] || '';
        const groupKey = `${exportDate}_${exp.po_reference || 'NO_PO'}`;
        
        if (!orderGroups.has(groupKey)) {
          orderGroups.set(groupKey, []);
        }
        orderGroups.get(groupKey)!.push(exp);
      });

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö orders
      const orders = Array.from(orderGroups.entries()).map(([key, items]) => {
        const firstItem = items[0];
        const totalValue = items.reduce((sum, item) => sum + (item.total_value || 0), 0);
        
        return {
          id: firstItem.id,
          order_number: firstItem.po_reference || `EXP-${key.split('_')[0]}`,
          order_date: firstItem.created_at?.split('T')[0],
          status: 'delivered',
          total_amount: totalValue,
          final_amount: totalValue,
          created_at: firstItem.created_at,
          order_items: items.map(item => ({
            id: item.id,
            product_name: item.product_name,
            product_code: item.product_code,
            quantity: item.quantity_exported,
            unit_price: item.unit_price,
            total: item.total_value,
            products: {
              product_name: item.product_name,
              sku_code: item.product_code
            }
          }))
        };
      });

      return {
        customer,
        orders: orders || [],
      };
    } catch (error) {
      console.error('Error in getCustomerExportDetails:', error);
      throw error;
    }
  }
}
