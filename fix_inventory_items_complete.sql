-- ============================================================================
-- FIX INVENTORY_ITEMS TABLE - Complete Fix
-- ============================================================================
-- ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:
-- 1. Error 400 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• inventory_items
-- 2. ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å location ‡πÑ‡∏î‡πâ
-- 3. RLS ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
-- 4. Column names ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
-- ============================================================================

-- STEP 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á inventory_items ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'inventory_items' AND table_schema = 'public') THEN
    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    CREATE TABLE public.inventory_items (
      id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
      product_name TEXT NOT NULL,
      product_code TEXT NOT NULL,
      sku TEXT, -- ‡πÄ‡∏û‡∏¥‡πà‡∏° SKU column
      location TEXT NOT NULL,
      lot TEXT,
      mfd DATE,
      
      -- Legacy columns (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility)
      quantity_boxes INTEGER DEFAULT 0,
      quantity_loose INTEGER DEFAULT 0,
      
      -- Multi-level unit columns (‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
      unit_level1_name TEXT DEFAULT '‡∏•‡∏±‡∏á',
      unit_level1_quantity INTEGER DEFAULT 0,
      unit_level1_rate INTEGER DEFAULT 0,
      unit_level2_name TEXT DEFAULT '‡∏Å‡∏•‡πà‡∏≠‡∏á',
      unit_level2_quantity INTEGER DEFAULT 0,
      unit_level2_rate INTEGER DEFAULT 0,
      unit_level3_name TEXT DEFAULT '‡∏ä‡∏¥‡πâ‡∏ô',
      unit_level3_quantity INTEGER DEFAULT 0,
      
      -- Soft delete support
      is_deleted BOOLEAN DEFAULT FALSE,
      
      -- Metadata
      user_id UUID DEFAULT '00000000-0000-0000-0000-000000000000'::uuid,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    RAISE NOTICE 'Created inventory_items table';
  ELSE
    RAISE NOTICE 'inventory_items table already exists';
  END IF;
END $$;

-- STEP 2: ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
ALTER TABLE public.inventory_items 
  ADD COLUMN IF NOT EXISTS sku TEXT,
  ADD COLUMN IF NOT EXISTS unit_level1_name TEXT DEFAULT '‡∏•‡∏±‡∏á',
  ADD COLUMN IF NOT EXISTS unit_level1_quantity INTEGER DEFAULT 0,
  ADD COLUMN IF NOT EXISTS unit_level1_rate INTEGER DEFAULT 0,
  ADD COLUMN IF NOT EXISTS unit_level2_name TEXT DEFAULT '‡∏Å‡∏•‡πà‡∏≠‡∏á',
  ADD COLUMN IF NOT EXISTS unit_level2_quantity INTEGER DEFAULT 0,
  ADD COLUMN IF NOT EXISTS unit_level2_rate INTEGER DEFAULT 0,
  ADD COLUMN IF NOT EXISTS unit_level3_name TEXT DEFAULT '‡∏ä‡∏¥‡πâ‡∏ô',
  ADD COLUMN IF NOT EXISTS unit_level3_quantity INTEGER DEFAULT 0,
  ADD COLUMN IF NOT EXISTS is_deleted BOOLEAN DEFAULT FALSE;

-- STEP 3: ‡πÄ‡∏û‡∏¥‡πà‡∏° indexes ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
CREATE INDEX IF NOT EXISTS idx_inventory_items_location ON public.inventory_items(location);
CREATE INDEX IF NOT EXISTS idx_inventory_items_product_code ON public.inventory_items(product_code);
CREATE INDEX IF NOT EXISTS idx_inventory_items_sku ON public.inventory_items(sku);
CREATE INDEX IF NOT EXISTS idx_inventory_items_is_deleted ON public.inventory_items(is_deleted);
CREATE INDEX IF NOT EXISTS idx_inventory_items_active ON public.inventory_items(is_deleted, location) WHERE is_deleted = FALSE;

-- STEP 4: ‡∏õ‡∏¥‡∏î RLS (Row Level Security) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤
ALTER TABLE public.inventory_items DISABLE ROW LEVEL SECURITY;

-- STEP 5: ‡∏•‡∏ö RLS policies ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
DROP POLICY IF EXISTS "Users can view own inventory items" ON public.inventory_items;
DROP POLICY IF EXISTS "Users can create own inventory items" ON public.inventory_items;
DROP POLICY IF EXISTS "Users can update own inventory items" ON public.inventory_items;
DROP POLICY IF EXISTS "Users can delete own inventory items" ON public.inventory_items;
DROP POLICY IF EXISTS "Anyone can view inventory items" ON public.inventory_items;
DROP POLICY IF EXISTS "Anyone can view active inventory items" ON public.inventory_items;
DROP POLICY IF EXISTS "Anyone can view deleted inventory items for audit" ON public.inventory_items;
DROP POLICY IF EXISTS "Anyone can insert inventory items" ON public.inventory_items;
DROP POLICY IF EXISTS "Anyone can update inventory items" ON public.inventory_items;
DROP POLICY IF EXISTS "Anyone can delete inventory items" ON public.inventory_items;

-- STEP 6: ‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏Å‡πà‡∏ó‡∏∏‡∏Å role
GRANT ALL ON public.inventory_items TO anon;
GRANT ALL ON public.inventory_items TO authenticated;

-- STEP 7: ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updated_at
CREATE OR REPLACE FUNCTION public.update_inventory_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS update_inventory_items_updated_at ON public.inventory_items;
CREATE TRIGGER update_inventory_items_updated_at
  BEFORE UPDATE ON public.inventory_items
  FOR EACH ROW
  EXECUTE FUNCTION public.update_inventory_updated_at();

-- STEP 8: ‡∏™‡∏£‡πâ‡∏≤‡∏á view ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö active items
CREATE OR REPLACE VIEW public.active_inventory_items AS
SELECT *
FROM public.inventory_items
WHERE is_deleted = FALSE;

GRANT SELECT ON public.active_inventory_items TO anon;
GRANT SELECT ON public.active_inventory_items TO authenticated;

-- STEP 9: Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• legacy columns ‡∏Å‡∏±‡∏ö multi-level columns (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤)
UPDATE public.inventory_items
SET 
  unit_level1_quantity = COALESCE(quantity_boxes, 0),
  unit_level3_quantity = COALESCE(quantity_loose, 0)
WHERE unit_level1_quantity = 0 AND unit_level3_quantity = 0 
  AND (quantity_boxes > 0 OR quantity_loose > 0);

-- STEP 10: ‡πÄ‡∏û‡∏¥‡πà‡∏° comments ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö documentation
COMMENT ON TABLE public.inventory_items IS '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö multi-level units';
COMMENT ON COLUMN public.inventory_items.product_code IS '‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á';
COMMENT ON COLUMN public.inventory_items.sku IS 'SKU code - ‡∏£‡∏´‡∏±‡∏™ SKU ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
COMMENT ON COLUMN public.inventory_items.location IS '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö A/1/01';
COMMENT ON COLUMN public.inventory_items.quantity_boxes IS '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á (Legacy - ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility)';
COMMENT ON COLUMN public.inventory_items.quantity_loose IS '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏®‡∏© (Legacy - ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility)';
COMMENT ON COLUMN public.inventory_items.unit_level1_name IS '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö 1 (‡πÄ‡∏ä‡πà‡∏ô ‡∏•‡∏±‡∏á)';
COMMENT ON COLUMN public.inventory_items.unit_level1_quantity IS '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö 1';
COMMENT ON COLUMN public.inventory_items.unit_level1_rate IS '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö 1 ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô';
COMMENT ON COLUMN public.inventory_items.is_deleted IS 'Soft delete flag - TRUE = ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö';

-- ============================================================================
-- VERIFICATION
-- ============================================================================

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
SELECT 
  column_name,
  data_type,
  is_nullable,
  column_default
FROM information_schema.columns
WHERE table_name = 'inventory_items' 
  AND table_schema = 'public'
ORDER BY ordinal_position;

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RLS status
SELECT 
  schemaname,
  tablename,
  CASE WHEN rowsecurity THEN 'RLS ENABLED ‚ö†Ô∏è' ELSE 'RLS DISABLED ‚úÖ' END as rls_status
FROM pg_tables t
LEFT JOIN pg_class c ON c.relname = t.tablename
WHERE tablename = 'inventory_items' AND schemaname = 'public';

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions
SELECT 
  grantee,
  privilege_type
FROM information_schema.role_table_grants
WHERE table_name = 'inventory_items' 
  AND table_schema = 'public'
ORDER BY grantee, privilege_type;

-- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
SELECT 
  id,
  product_name,
  product_code,
  location,
  quantity_boxes,
  quantity_loose,
  unit_level1_quantity,
  unit_level2_quantity,
  unit_level3_quantity,
  is_deleted
FROM public.inventory_items
WHERE is_deleted = FALSE
LIMIT 5;

-- ============================================================================
-- SUCCESS MESSAGE
-- ============================================================================

SELECT 'üéâ INVENTORY_ITEMS TABLE FIX COMPLETED!

‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö multi-level units
‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á legacy columns ‡πÅ‡∏•‡∏∞ columns ‡πÉ‡∏´‡∏°‡πà
‚úÖ ‡∏õ‡∏¥‡∏î RLS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤
‚úÖ ‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏Å‡πà anon ‡πÅ‡∏•‡∏∞ authenticated
‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° soft delete support
‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß

‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å location ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ product_code ‡πÑ‡∏î‡πâ
- ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô multi-level units ‡πÑ‡∏î‡πâ
- Soft delete ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ refresh React app ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!
' as status;
