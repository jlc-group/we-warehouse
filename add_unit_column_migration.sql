-- üîß Migration: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå unit ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á inventory_items
-- ‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Supabase SQL Editor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö

-- ==========================================
-- Phase 1: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå unit
-- ==========================================

-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå unit ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á inventory_items
ALTER TABLE inventory_items
ADD COLUMN IF NOT EXISTS unit TEXT DEFAULT '‡∏Å‡∏•‡πà‡∏≠‡∏á';

-- ==========================================
-- Phase 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
-- ==========================================

-- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
UPDATE inventory_items SET unit =
CASE
    -- ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ "‡∏•‡∏±‡∏á" ‡∏´‡∏£‡∏∑‡∏≠ "carton"
    WHEN LOWER(product_name) LIKE '%‡∏•‡∏±‡∏á%' OR LOWER(product_name) LIKE '%carton%' THEN '‡∏•‡∏±‡∏á'

    -- ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ "‡∏ä‡∏¥‡πâ‡∏ô", "piece", "pcs"
    WHEN LOWER(product_name) LIKE '%‡∏ä‡∏¥‡πâ‡∏ô%' OR LOWER(product_name) LIKE '%piece%' OR LOWER(product_name) LIKE '%pcs%' THEN '‡∏ä‡∏¥‡πâ‡∏ô'

    -- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ loose_quantity > 0 ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏®‡∏© (‡∏ä‡∏¥‡πâ‡∏ô)
    WHEN COALESCE(loose_quantity, 0) > 0 THEN '‡∏ä‡∏¥‡πâ‡∏ô'

    -- ‡∏ñ‡πâ‡∏≤ box_quantity ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ loose_quantity ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á
    WHEN COALESCE(box_quantity, 0) > COALESCE(loose_quantity, 0) * 2 THEN '‡∏Å‡∏•‡πà‡∏≠‡∏á'

    -- ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á (default)
    ELSE '‡∏Å‡∏•‡πà‡∏≠‡∏á'
END
WHERE unit IS NULL OR unit = '‡∏Å‡∏•‡πà‡∏≠‡∏á';

-- ==========================================
-- Phase 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
-- ==========================================

CREATE OR REPLACE FUNCTION auto_detect_unit(
    product_name_param TEXT,
    box_qty INTEGER DEFAULT 0,
    loose_qty INTEGER DEFAULT 0
)
RETURNS TEXT AS $$
BEGIN
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    IF LOWER(product_name_param) LIKE '%‡∏•‡∏±‡∏á%' OR LOWER(product_name_param) LIKE '%carton%' THEN
        RETURN '‡∏•‡∏±‡∏á';
    END IF;

    IF LOWER(product_name_param) LIKE '%‡∏ä‡∏¥‡πâ‡∏ô%' OR LOWER(product_name_param) LIKE '%piece%' OR LOWER(product_name_param) LIKE '%pcs%' THEN
        RETURN '‡∏ä‡∏¥‡πâ‡∏ô';
    END IF;

    IF LOWER(product_name_param) LIKE '%‡πÅ‡∏ú‡∏á%' OR LOWER(product_name_param) LIKE '%‡πÅ‡∏ú‡πà‡∏ô%' OR LOWER(product_name_param) LIKE '%sheet%' THEN
        RETURN '‡πÅ‡∏ú‡∏á';
    END IF;

    IF LOWER(product_name_param) LIKE '%‡∏Ç‡∏ß‡∏î%' OR LOWER(product_name_param) LIKE '%bottle%' THEN
        RETURN '‡∏Ç‡∏ß‡∏î';
    END IF;

    IF LOWER(product_name_param) LIKE '%‡∏ã‡∏≠‡∏á%' OR LOWER(product_name_param) LIKE '%sachet%' THEN
        RETURN '‡∏ã‡∏≠‡∏á';
    END IF;

    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô quantity
    IF COALESCE(loose_qty, 0) > 0 AND COALESCE(loose_qty, 0) > COALESCE(box_qty, 0) THEN
        RETURN '‡∏ä‡∏¥‡πâ‡∏ô';
    END IF;

    -- default ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á
    RETURN '‡∏Å‡∏•‡πà‡∏≠‡∏á';
END;
$$ LANGUAGE plpgsql;

-- ==========================================
-- Phase 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
-- ==========================================

CREATE OR REPLACE FUNCTION trigger_auto_set_unit()
RETURNS TRIGGER AS $$
BEGIN
    -- ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    IF NEW.unit IS NULL OR NEW.unit = '‡∏Å‡∏•‡πà‡∏≠‡∏á' THEN
        NEW.unit := auto_detect_unit(
            NEW.product_name,
            COALESCE(NEW.box_quantity, 0),
            COALESCE(NEW.loose_quantity, 0)
        );
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö INSERT ‡πÅ‡∏•‡∏∞ UPDATE
DROP TRIGGER IF EXISTS auto_set_unit_trigger ON inventory_items;
CREATE TRIGGER auto_set_unit_trigger
    BEFORE INSERT OR UPDATE ON inventory_items
    FOR EACH ROW
    EXECUTE FUNCTION trigger_auto_set_unit();

-- ==========================================
-- Phase 5: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï view ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå unit ‡∏à‡∏£‡∏¥‡∏á
-- ==========================================

-- ‡∏•‡∏ö view ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
DROP VIEW IF EXISTS warehouse_locations_with_inventory CASCADE;

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á view ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå unit ‡∏à‡∏£‡∏¥‡∏á
CREATE VIEW warehouse_locations_with_inventory AS
SELECT
    wl.*,
    COALESCE(inv.inventory_count, 0) as inventory_count,
    COALESCE(inv.total_boxes, 0) as total_boxes,
    COALESCE(inv.total_loose, 0) as total_loose,
    COALESCE(inv.total_cartons, 0) as total_cartons,
    COALESCE(inv.total_pieces, 0) as total_pieces,
    COALESCE(inv.total_sheets, 0) as total_sheets,
    COALESCE(inv.total_bottles, 0) as total_bottles,
    COALESCE(inv.total_sachets, 0) as total_sachets,
    COALESCE(inv.total_quantity_sum, 0) as total_quantity_sum,
    inv.product_list,
    inv.detailed_inventory,
    CASE
        WHEN wl.capacity_boxes > 0 AND wl.capacity_loose > 0 THEN
            GREATEST(
                (COALESCE(inv.total_boxes, 0)::NUMERIC / wl.capacity_boxes * 100),
                (COALESCE(inv.total_loose, 0)::NUMERIC / wl.capacity_loose * 100)
            )
        WHEN wl.capacity_boxes > 0 THEN
            (COALESCE(inv.total_boxes, 0)::NUMERIC / wl.capacity_boxes * 100)
        WHEN wl.capacity_loose > 0 THEN
            (COALESCE(inv.total_loose, 0)::NUMERIC / wl.capacity_loose * 100)
        ELSE 0
    END as utilization_percentage,
    wl.updated_at as last_sync
FROM warehouse_locations wl
LEFT JOIN (
    SELECT
        normalize_location_format(location) as normalized_location,
        COUNT(*) as inventory_count,
        SUM(COALESCE(box_quantity, 0)) as total_boxes,
        SUM(COALESCE(loose_quantity, 0)) as total_loose,
        -- ‡∏ô‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå unit
        SUM(CASE WHEN unit = '‡∏•‡∏±‡∏á' THEN COALESCE(box_quantity, 0) + COALESCE(loose_quantity, 0) ELSE 0 END) as total_cartons,
        SUM(CASE WHEN unit = '‡∏ä‡∏¥‡πâ‡∏ô' THEN COALESCE(box_quantity, 0) + COALESCE(loose_quantity, 0) ELSE 0 END) as total_pieces,
        SUM(CASE WHEN unit = '‡πÅ‡∏ú‡∏á' OR unit = '‡πÅ‡∏ú‡πà‡∏ô' THEN COALESCE(box_quantity, 0) + COALESCE(loose_quantity, 0) ELSE 0 END) as total_sheets,
        SUM(CASE WHEN unit = '‡∏Ç‡∏ß‡∏î' THEN COALESCE(box_quantity, 0) + COALESCE(loose_quantity, 0) ELSE 0 END) as total_bottles,
        SUM(CASE WHEN unit = '‡∏ã‡∏≠‡∏á' THEN COALESCE(box_quantity, 0) + COALESCE(loose_quantity, 0) ELSE 0 END) as total_sachets,
        SUM(COALESCE(box_quantity, 0) + COALESCE(loose_quantity, 0)) as total_quantity_sum,
        -- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        STRING_AGG(DISTINCT
            COALESCE(product_name, sku, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'),
            ', ' ORDER BY COALESCE(product_name, sku, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠')
        ) as product_list,
        -- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        JSONB_AGG(
            JSONB_BUILD_OBJECT(
                'sku_code', sku,
                'product_name', COALESCE(product_name, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'),
                'unit', COALESCE(unit, '‡∏Å‡∏•‡πà‡∏≠‡∏á'),
                'box_quantity', COALESCE(box_quantity, 0),
                'loose_quantity', COALESCE(loose_quantity, 0),
                'total_quantity', COALESCE(box_quantity, 0) + COALESCE(loose_quantity, 0),
                'unit_display', COALESCE(unit, '‡∏Å‡∏•‡πà‡∏≠‡∏á')
            ) ORDER BY product_name, sku
        ) FILTER (WHERE sku IS NOT NULL) as detailed_inventory
    FROM inventory_items
    WHERE location IS NOT NULL AND location != '' AND TRIM(location) != ''
    GROUP BY normalize_location_format(location)
) inv ON wl.location_code = inv.normalized_location;

-- ==========================================
-- Phase 6: Grant permissions
-- ==========================================

GRANT EXECUTE ON FUNCTION auto_detect_unit(TEXT, INTEGER, INTEGER) TO public;

-- ==========================================
-- Phase 7: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
-- ==========================================

-- ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
SELECT
    unit,
    COUNT(*) as ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£,
    SUM(COALESCE(box_quantity, 0)) as ‡∏£‡∏ß‡∏°_box_quantity,
    SUM(COALESCE(loose_quantity, 0)) as ‡∏£‡∏ß‡∏°_loose_quantity
FROM inventory_items
GROUP BY unit
ORDER BY COUNT(*) DESC;

-- ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
SELECT
    product_name,
    unit,
    box_quantity,
    loose_quantity,
    location
FROM inventory_items
WHERE location IS NOT NULL
LIMIT 10;

SELECT 'Migration completed! Unit column added and populated automatically.' as status;